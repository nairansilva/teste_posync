{"ast":null,"code":"import _toConsumableArray from \"C:/Totvs/po-angular/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"C:/Totvs/po-angular/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:/Totvs/po-angular/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Totvs/po-angular/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _regeneratorRuntime from \"C:/Totvs/po-angular/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/regenerator\";\nimport { __awaiter } from 'tslib';\nimport { InjectionToken, Injectable, Inject, NgModule } from '@angular/core';\nimport * as LocalForage from 'localforage';\nimport IdleQueue from 'custom-idle-queue';\nimport Loki from 'lokijs';\nimport LokiIndexedAdapter from 'lokijs/src/loki-indexed-adapter';\nimport * as ɵngcc0 from '@angular/core';\nvar keyField = 'key';\n\nvar PoLokiDriver = /*#__PURE__*/function () {\n  function PoLokiDriver() {\n    _classCallCheck(this, PoLokiDriver);\n\n    var self = this;\n    this.driver = {\n      _driver: 'lokijs',\n      _initStorage: function _initStorage(options) {\n        return self.initStorage(options);\n      },\n      clear: function clear() {\n        return self.clear(this);\n      },\n      getItem: function getItem(key) {\n        return self.getItem(this, key);\n      },\n      iterate: function iterate(iteratorCallback) {\n        return self.iterate(this, iteratorCallback);\n      },\n      key: function key(n) {\n        return self.key(this, n);\n      },\n      keys: function keys() {\n        return self.keys(this);\n      },\n      length: function length() {\n        return self.length(this);\n      },\n      removeItem: function removeItem(key) {\n        return self.removeItem(this, key);\n      },\n      setItem: function setItem(key, value) {\n        return self.setItem(this, key, value);\n      }\n    };\n  } // Funções de iteração\n\n\n  _createClass(PoLokiDriver, [{\n    key: \"clear\",\n    value: function clear(localforage) {\n      var _this = this;\n\n      return new Promise(function (resolve) {\n        localforage.ready().then(function () {\n          if (_this.hasCollectionAndDataInCollection()) {\n            _this.clearCollection();\n          }\n\n          resolve(null);\n        });\n      });\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem(localforage, key) {\n      var _this2 = this;\n\n      return new Promise(function (resolve) {\n        localforage.ready().then(function () {\n          if (_this2.hasCollectionAndDataInCollection()) {\n            var item = _this2.getItemInCollectionBy(keyField, key);\n\n            if (item) {\n              resolve(item.value);\n            }\n          }\n\n          resolve(null);\n        });\n      });\n    }\n  }, {\n    key: \"initStorage\",\n    value: function initStorage(options) {\n      var _this3 = this;\n\n      return new Promise(function (resolve) {\n        try {\n          _this3.configureLokiStorage(options, _this3.databaseInitialize.bind(_this3, options, resolve));\n        } catch (_a) {\n          throw new Error(\"Cannot configure Loki Storage\");\n        }\n      });\n    }\n  }, {\n    key: \"iterate\",\n    value: function iterate(localforage, iteratorCallback) {\n      var _this4 = this;\n\n      return new Promise(function (resolve) {\n        localforage.ready().then(function () {\n          if (_this4.hasCollectionAndDataInCollection()) {\n            _this4.iterateWithDataItem(iteratorCallback);\n          }\n\n          resolve(null);\n        });\n      });\n    }\n  }, {\n    key: \"key\",\n    value: function key(localforage, n) {\n      var _this5 = this;\n\n      return new Promise(function (resolve) {\n        localforage.ready().then(function () {\n          if (_this5.hasCollection()) {\n            var map = _this5.getLokiMap();\n\n            resolve(map[n]);\n          }\n\n          resolve(null);\n        });\n      });\n    }\n  }, {\n    key: \"keys\",\n    value: function keys(localforage) {\n      var _this6 = this;\n\n      return new Promise(function (resolve) {\n        localforage.ready().then(function () {\n          if (_this6.hasCollection()) {\n            var keys = [];\n\n            var map = _this6.getLokiMap();\n\n            for (var _i = 0, _Object$keys = Object.keys(map); _i < _Object$keys.length; _i++) {\n              var key = _Object$keys[_i];\n              keys.push(map[key]);\n            }\n\n            resolve(keys);\n          }\n\n          resolve(null);\n        });\n      });\n    }\n  }, {\n    key: \"length\",\n    value: function length(localforage) {\n      var _this7 = this;\n\n      return new Promise(function (resolve) {\n        localforage.ready().then(function () {\n          if (_this7.hasCollection()) {\n            resolve(_this7.getNumberItensInCollection());\n          }\n\n          resolve(0);\n        });\n      });\n    }\n  }, {\n    key: \"removeItem\",\n    value: function removeItem(localforage, key) {\n      var _this8 = this;\n\n      return new Promise(function (resolve) {\n        localforage.ready().then(function () {\n          if (_this8.hasCollection()) {\n            _this8.findAndRemoveItem(key);\n          }\n\n          resolve(null);\n        });\n      });\n    }\n  }, {\n    key: \"setItem\",\n    value: function setItem(localforage, key, value) {\n      var _this9 = this;\n\n      return new Promise(function (resolve) {\n        localforage.ready().then(function () {\n          if (_this9.hasCollection()) {\n            var item;\n\n            if (_this9.hasDataInCollection()) {\n              item = _this9.getItemInCollectionBy(keyField, key);\n            }\n\n            _this9.insertOrUpdate(item, value, key);\n          }\n\n          resolve(value);\n        });\n      });\n    } // Funções de acesso ao storage\n\n  }, {\n    key: \"getDriver\",\n    value: function getDriver() {\n      return this.driver;\n    }\n  }, {\n    key: \"addCollection\",\n    value: function addCollection(options) {\n      return this.db.addCollection(options.storeName, {\n        unique: [keyField]\n      });\n    }\n  }, {\n    key: \"clearCollection\",\n    value: function clearCollection() {\n      this.collection.clear({\n        removeIndices: false\n      });\n    }\n  }, {\n    key: \"configureLokiStorage\",\n    value: function configureLokiStorage(options, databaseInitialize) {\n      var idbAdapter = new LokiIndexedAdapter();\n      this.db = new Loki(options.name, {\n        adapter: idbAdapter,\n        autoload: true,\n        autoloadCallback: databaseInitialize,\n        autosave: true,\n        autosaveInterval: 4000\n      });\n    }\n  }, {\n    key: \"findAndRemoveItem\",\n    value: function findAndRemoveItem(key) {\n      this.collection.findAndRemove(_defineProperty({}, keyField, key));\n    }\n  }, {\n    key: \"getCollection\",\n    value: function getCollection(options) {\n      return this.db.getCollection(options.storeName);\n    }\n  }, {\n    key: \"databaseInitialize\",\n    value: function databaseInitialize(options, resolve) {\n      this.collection = this.getCollection(options);\n\n      if (!this.hasCollection()) {\n        this.collection = this.addCollection(options);\n      }\n\n      resolve();\n    }\n  }, {\n    key: \"getItemInCollectionBy\",\n    value: function getItemInCollectionBy(fieldKey, key) {\n      return this.collection.by(fieldKey, key);\n    }\n  }, {\n    key: \"getLokiMap\",\n    value: function getLokiMap() {\n      return this.collection.constraints.unique[keyField].lokiMap;\n    }\n  }, {\n    key: \"hasCollection\",\n    value: function hasCollection() {\n      return this.collection;\n    }\n  }, {\n    key: \"hasDataInCollection\",\n    value: function hasDataInCollection() {\n      return this.collection.data && this.collection.data.length;\n    }\n  }, {\n    key: \"hasCollectionAndDataInCollection\",\n    value: function hasCollectionAndDataInCollection() {\n      return this.hasCollection() && this.hasDataInCollection();\n    }\n  }, {\n    key: \"insertOrUpdate\",\n    value: function insertOrUpdate(item, value, key) {\n      if (item) {\n        item.value = value;\n        this.collection.update(item);\n      } else {\n        var _this$collection$inse;\n\n        this.collection.insert((_this$collection$inse = {}, _defineProperty(_this$collection$inse, keyField, key), _defineProperty(_this$collection$inse, \"value\", value), _this$collection$inse));\n      }\n    }\n  }, {\n    key: \"iterateWithDataItem\",\n    value: function iterateWithDataItem(iteratorcallback) {\n      this.collection.data.forEach(function (element) {\n        iteratorcallback(element.value, element[keyField], element.$loki);\n      });\n    }\n  }, {\n    key: \"getNumberItensInCollection\",\n    value: function getNumberItensInCollection() {\n      return this.collection.count();\n    }\n  }]);\n\n  return PoLokiDriver;\n}();\n\nvar PO_STORAGE_CONFIG_TOKEN = new InjectionToken('PO_STORAGE_CONFIG_TOKEN');\n/**\r\n * @description\r\n *\r\n * O PO Storage é uma biblioteca que fornece um serviço para armazenamento de dados no dispositivo local, sendo semelhante\r\n * ao funcionamento do [IonicStorage](https://ionicframework.com/docs/storage/).\r\n * É possível utilizar os drivers [Websql](https://dev.w3.org/html5/webdatabase/), [Indexeddb](https://www.w3.org/TR/IndexedDB/),\r\n * [LocalStorage](https://html.spec.whatwg.org/multipage/webstorage.html) e também [LokiJS](https://github.com/techfort/LokiJS/wiki).\r\n *\r\n * Para um melhor ganho de performance ao buscar e salvar dados, recomendamos a utilização do `LokiJS`, um *database*\r\n * orientado a documento semelhante ao MongoDB, que além de permitir a persistência dos dados no dispositivo possibilita\r\n * também o armazenamento dos dados em memória. Outra vantagem, é o aumento do limite de armazenamento para\r\n * aproximadamente `300mb`.\r\n *\r\n * A estrutura utilizada para armazenar os dados é a de chave/valor, onde uma chave funciona como um identificador exclusivo.\r\n *\r\n * #### Instalando o PO Storage\r\n *\r\n * Para instalar o `po-storage` em sua aplicação execute o seguinte comando:\r\n *\r\n * ```shell\r\n * ng add @po-ui/ng-storage\r\n * ```\r\n * Será instalado o pacote `@po-ui/ng-storage` e também já importará `PoStorageModule` no módulo principal da sua aplicação, conforme abaixo:\r\n *\r\n * ```typescript\r\n * import { PoStorageModule } from '@po-ui/ng-storage';\r\n *\r\n * @NgModule({\r\n *  declarations: [...],\r\n *  imports: [\r\n *    // Importação do módulo PoStorageModule\r\n *    PoStorageModule.forRoot(),\r\n *  ],\r\n *  bootstrap: [IonicApp],\r\n *  providers: [...]\r\n * })\r\n * export class AppModule {}\r\n * ```\r\n *\r\n * Com a declaração do módulo, é criada uma base de dados no armazenamento local e o serviço `PoStorageService` estará\r\n * pronto para ser utilizada na sua aplicação.\r\n *\r\n * #### Configurando as opções de armazenamento\r\n *\r\n * Na importação do módulo, o método `PoStorageModule.forRoot()` pode receber como parâmetro um objeto do tipo\r\n * [`PoStorageConfig`](documentation/po-storage#po-storage-config),\r\n * que serve para configurar as opções personalizadas do armazenamento, como por exemplo: o tipo de armazenamento\r\n * preferêncial.\r\n *\r\n * Caso não seja passada nenhuma configuração a ordem padrão será: ['websql', 'indexeddb', 'localstorage', 'lokijs'].\r\n *\r\n * Abaixo segue um exemplo de configuração onde o storage preferencial passa a ser o `lokijs`:\r\n *\r\n * ```typescript\r\n * import { PoStorageModule } from '@po-ui/ng-storage';\r\n *\r\n * @NgModule({\r\n *  declarations: [...],\r\n *  imports: [\r\n *    // Importação do módulo PoStorageModule com a configuração personalizada\r\n *    PoStorageModule.forRoot({\r\n *      name: 'mystorage',\r\n *      storeName: '_mystore',\r\n *      driverOrder: ['lokijs', 'websql', 'indexeddb', 'localstorage']\r\n *    }),\r\n *  ],\r\n *  bootstrap: [IonicApp],\r\n *  providers: [...]\r\n * })\r\n * export class AppModule {}\r\n * ```\r\n */\n\nvar PoStorageService = /*#__PURE__*/function () {\n  function PoStorageService(config) {\n    _classCallCheck(this, PoStorageService);\n\n    this.driver = null;\n    this.idleQueue = new IdleQueue();\n    this.lokijsDriver = new PoLokiDriver();\n    this.setStoragePromise(config);\n  }\n  /**\r\n   * Retorna a configuração padrão para o armazenamento. Caso nenhuma configuração seja inserida,\r\n   * essa configuração será utilizada.\r\n   *\r\n   * @returns {PoStorageConfig} Objeto com a configuração padrão do armazenamento.\r\n   */\n\n\n  _createClass(PoStorageService, [{\n    key: \"appendArrayToArray\",\n    value:\n    /**\r\n     * Busca uma lista armazenada pela chave e concatena com a lista passada por parâmetro.\r\n     *\r\n     * Por exemplo:\r\n     *\r\n     * ``` typescript\r\n     * const clients = [ { name: 'Marie', age: 23 }, { name: 'Pether', age: 39 }];\r\n     *\r\n     * this.poStorageService.set('clientKey', clients).then(() => {});\r\n     *\r\n     * ...\r\n     *\r\n     * const newClients = [ { name: 'Lisa', age: 36 }, { name: 'Bruce', age: 18 } ];\r\n     *\r\n     * this.poStorageService.appendArrayToArray('clientKey', newClients).then(() => {\r\n     *   // A lista agora será:\r\n     *   // [ { name: 'Marie', age: 23 }, { name: 'Pether', age: 39 }, { name: 'Lisa', age: 36 }, { name: 'Bruce', age: 18 }];\r\n     * });\r\n     * ```\r\n     *\r\n     * @param {string} key Chave da lista armazenada.\r\n     * @param {Array} value Lista que será concatenada.\r\n     *\r\n     * @returns {Promise<any>} Promessa que é resolvida após as duas listas serem concatenadas e armazenadas localmente.\r\n     */\n    function appendArrayToArray(key, value) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var data, newData;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.getArrayOfStorage(key);\n\n              case 2:\n                data = _context.sent;\n                newData = [].concat(_toConsumableArray(data), _toConsumableArray(value));\n                return _context.abrupt(\"return\", this.set(key, newData));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\r\n     * Acrescenta um item em uma lista armazenada pela chave.\r\n     *\r\n     * @param {string} key Chave da lista armazenada.\r\n     * @param {Array} value Item que será acrescentado na lista.\r\n     *\r\n     * @returns {Promise<any>} Promessa que é resolvida após o item ser acrescentado na lista armazenada.\r\n     */\n\n  }, {\n    key: \"appendItemToArray\",\n    value: function appendItemToArray(key, value) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.getArrayOfStorage(key);\n\n              case 2:\n                data = _context2.sent;\n                data.push(value);\n                return _context2.abrupt(\"return\", this.set(key, data));\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n    /**\r\n     * Remove todos os itens da base de dados local configurada na declaração do módulo `PoStorageModule`.\r\n     *\r\n     * > Utilize este método com cautela, para evitar a perda indesejada de dados.\r\n     *\r\n     * @returns {Promise<void>} Promessa que é resolvida após todos os itens da base de dados local serem removidos.\r\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      return this.storagePromise.then(function (store) {\n        return store.clear();\n      });\n    }\n    /**\r\n     * Verifica se existe um valor dentro de uma determinada chave.\r\n     *\r\n     * @param {string} key Chave que será verificada.\r\n     *\r\n     * @returns {Promise<boolean>} Promessa que é resolvida quando a verificação da existência do valor na chave é concluída.\r\n     */\n\n  }, {\n    key: \"exists\",\n    value: function exists(key) {\n      return this.get(key).then(function (data) {\n        return Promise.resolve(data !== null);\n      });\n    }\n    /**\r\n     * Itera sobre todas as chaves armazenadas.\r\n     *\r\n     * @param {any} iteratorCallback Função de `callback` que é chamada a cada iteração, com os seguintes parâmetros:\r\n     * valor, chave e número da iteração.\r\n     *\r\n     * Exemplo de utilização:\r\n     *\r\n     * ``` typescript\r\n     * this.poStorageService.forEach((value: any, key: string, iterationNumber: number) => {\r\n     *   // Iteração sobre cada chave armazenada.\r\n     * });\r\n     * ```\r\n     *\r\n     * @returns {Promise<void>} Promessa que é resolvida após a iteração sobre todas as chaves armazenadas.\r\n     */\n\n  }, {\n    key: \"forEach\",\n    value: function forEach(iteratorCallback) {\n      return this.storagePromise.then(function (store) {\n        return store.iterate(iteratorCallback);\n      });\n    }\n    /**\r\n     * Retorna o valor armazenado em uma determinada chave.\r\n     *\r\n     * @param {string} key Chave que identifica o item.\r\n     * @param {boolean} lock Define se irá travar a leitura e a escrita da base de dados para não ser acessada de forma paralela.\r\n     * Caso outra leitura/escrita já tenha sido iniciada, este método irá esperar o outro terminar para então começar.\r\n     *\r\n     * Padrão: `false`.\r\n     *\r\n     * > Esta definição só será válida se o outro acesso paralelo a este método também estiver com o parâmetro *lock* ativado.\r\n     * @returns {Promise<any>} Promessa que é resolvida após o item ser buscado.\r\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      var lock = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _this10 = this;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!lock) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                _context4.next = 3;\n                return this.requestIdlePromise();\n\n              case 3:\n                _context4.next = 5;\n                return this.idleQueue.wrapCall(function () {\n                  return __awaiter(_this10, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            _context3.next = 2;\n                            return this.getImmutableItem(key);\n\n                          case 2:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3, this);\n                  }));\n                });\n\n              case 5:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 6:\n                _context4.next = 8;\n                return this.getImmutableItem(key);\n\n              case 8:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n    /**\r\n     * Retorna o nome do *driver* que está sendo usado para armazenar os dados, por exemplo: localStorage.\r\n     *\r\n     * @returns {string | null} Nome do *driver*.\r\n     */\n\n  }, {\n    key: \"getDriver\",\n    value: function getDriver() {\n      return this.driver;\n    }\n    /**\r\n     * Retorna o primeiro item de uma lista para uma determinada chave.\r\n     *\r\n     * @param {string} key Chave da lista.\r\n     * @returns {Promise<any>} Promessa que é resolvida após o primeiro item ser encontrado.\r\n     */\n\n  }, {\n    key: \"getFirstItem\",\n    value: function getFirstItem(key) {\n      return this.get(key).then(function (data) {\n        return Promise.resolve(data ? data[0] : null);\n      });\n    }\n    /**\r\n     * Remove o primeiro item de uma lista a partir da chave.\r\n     *\r\n     * @param {string} key Chave da lista que será removido o primeiro item.\r\n     * @returns {Promise<any>} Promessa que é resolvida após o primeiro item da lista ser removido.\r\n     */\n\n  }, {\n    key: \"getItemAndRemove\",\n    value: function getItemAndRemove(key) {\n      var _this11 = this;\n\n      return this.get(key).then(function (data) {\n        if (data === null) {\n          return null;\n        }\n\n        var item = data.shift();\n        return _this11.set(key, data).then(function () {\n          return Promise.resolve(item);\n        });\n      });\n    }\n    /**\r\n     * Busca o primeiro objeto encontrado dentro de uma lista pelo do valor de um campo.\r\n     *\r\n     * Por exemplo:\r\n     *\r\n     * ``` typescript\r\n     * const clients = [ { name: 'Marie', age: 23 }, { name: 'Pether', age: 39 }];\r\n     *\r\n     * this.poStorageService.set('clientKey', clients).then(() => {});\r\n     *\r\n     * ...\r\n     *\r\n     * this.poStorageService.getItemByField('clientKey', 'name', 'Marie').then(client => {\r\n     *   // Resultado do console.log: { name: 'Marie', age: 23 }\r\n     *   console.log(client);\r\n     * });\r\n     * ```\r\n     *\r\n     * @param {string} key Chave da lista.\r\n     * @param {string} fieldName O campo a ser filtrado.\r\n     * @param {any} fieldValue O valor do campo.\r\n     * @returns {Promise<any>} Promessa que é resolvida com o item que foi encontrado.\r\n     */\n\n  }, {\n    key: \"getItemByField\",\n    value: function getItemByField(key, fieldName, fieldValue) {\n      return this.get(key).then(function (storageRecords) {\n        var storageRecordsFiltered = storageRecords.find(function (storageRecord) {\n          return storageRecord[fieldName] === fieldValue;\n        });\n        storageRecordsFiltered = storageRecordsFiltered || null;\n        return Promise.resolve(storageRecordsFiltered);\n      });\n    }\n    /**\r\n     * Lista com todas as chaves armazenadas.\r\n     * @returns {Promise<Array<string>>} Promessa que é resolvida com todas as chaves armazenadas.\r\n     */\n\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      return this.storagePromise.then(function (store) {\n        return store.keys();\n      });\n    }\n    /**\r\n     * Quantidade de chaves armazenadas.\r\n     * @returns {Promise<number>} Promessa que é resolvida com o número de chaves armazenadas.\r\n     */\n\n  }, {\n    key: \"length\",\n    value: function length() {\n      return this.storagePromise.then(function (store) {\n        return store.length();\n      });\n    }\n    /**\r\n     * Utilizado para gerenciar o bloqueio e desbloqueio de recursos no `PoStorageService`.\r\n     * Aguardando a liberação da utilização dos recursos que participam deste comportamento e posteriormente envolve o recurso\r\n     * passado como parâmetro em um comportamento de bloqueio e desbloqueio.\r\n     *\r\n     * Este método se comporta igual a utilização em conjunta dos métodos: `PoStorageService.requestIdlePromise()`,\r\n     * `PoStorageService.lock()` e `PoStorageService.unlook()`.\r\n     *\r\n     * Veja mais no método: [`PoStorage.requestIdlePromise()`](documentation/po-storage#request-idle-promise).\r\n     *\r\n     * @param {Function} limitedResource Função que será envolvida no comportamento de bloqueio e desbloqueio.\r\n     */\n\n  }, {\n    key: \"limitedCallWrap\",\n    value: function limitedCallWrap(limitedResource) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.requestIdlePromise();\n\n              case 2:\n                return _context5.abrupt(\"return\", this.idleQueue.wrapCall(limitedResource));\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n    /**\r\n     * Incrementa um valor na fila de bloqueio do `PoStorageService`. Utilizado juntamente com o método `unlock` para poder\r\n     * controlar a execução de uma determinada tarefa com o `PoStorage.requestIdlePromise()`.\r\n     *\r\n     * Veja mais no método: [`PoStorage.requestIdlePromise()`](documentation/po-storage#request-idle-promise).\r\n     */\n\n  }, {\n    key: \"lock\",\n    value: function lock() {\n      this.idleQueue.lock();\n    }\n    /**\r\n     * Determina se o processo de inicialização do *driver* assíncrono foi concluído.\r\n     *\r\n     * @returns {Promise<LocalForage>} Promessa que é resolvida quando o processo de inicialização do *driver* assíncrono\r\n     * for concluído.\r\n     */\n\n  }, {\n    key: \"ready\",\n    value: function ready() {\n      return this.storagePromise;\n    }\n    /**\r\n     * Remove um valor associado a uma chave.\r\n     *\r\n     * @param {key} key Chave do valor que será removido.\r\n     * @returns {Promise<any>} Promessa que é resolvida após o valor ser removido.\r\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(key) {\n      return this.storagePromise.then(function (store) {\n        return store.removeItem(key);\n      });\n    }\n    /**\r\n     * Remove uma propriedade de um objeto armazenado.\r\n     *\r\n     * @param {string} key Chave do objeto armazenado.\r\n     * @param {string} property Propriedade que será removida.\r\n     *\r\n     * @returns {Promise<any>} Promessa que é resolvida após a propriedade ser removida.\r\n     */\n\n  }, {\n    key: \"removeIndexFromObject\",\n    value: function removeIndexFromObject(key, property) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.getObjectOfStorage(key);\n\n              case 2:\n                data = _context6.sent;\n                delete data[property];\n                return _context6.abrupt(\"return\", this.set(key, data));\n\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n    }\n    /**\r\n     * Remove um objeto de uma lista armazenada pelo valor de uma propriedade.\r\n     *\r\n     * Por exemplo:\r\n     *\r\n     * ``` typescript\r\n     * const clients = [ { name: 'Marie', age: 23 }, { name: 'Pether', age: 39 }];\r\n     *\r\n     * this.poStorageService.set('clientKey', clients).then(() => {});\r\n     *\r\n     * ...\r\n     *\r\n     * this.poStorageService.removeItemFromArray('clientKey', 'name', 'Marie').then(() => {\r\n     *   // O objeto { name: 'Marie', age: 23 } foi removido da lista que está na chave 'clientKey'\r\n     * });\r\n     * ```\r\n     *\r\n     * @param {string} key Chave da lista que contém o item que será removido.\r\n     * @param {string} field O campo a ser filtrado no item.\r\n     * @param {string} value O valor do filtro.\r\n     * @returns {Promise<any>} Promessa que é resolvida quando o objeto for removido da lista.\r\n     */\n\n  }, {\n    key: \"removeItemFromArray\",\n    value: function removeItemFromArray(key, field, value) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.getArrayOfStorage(key);\n\n              case 2:\n                data = _context7.sent;\n                data = data.filter(function (item) {\n                  return item[field] !== value;\n                });\n                return _context7.abrupt(\"return\", this.set(key, data));\n\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n    }\n    /**\r\n     * <a id=\"request-idle-promise\"></a>\r\n     * Método que verifica se o acesso a base de dados configurada está liberado.\r\n     *\r\n     * Utilizado em conjunto com os métodos `lock()` e `unlock()` entre tarefas que não podem ser executadas de forma\r\n     * paralela, para não causar inconsistências nos dados.\r\n     *\r\n     * Exemplo de utilização:\r\n     *\r\n     * ```\r\n     * // Aguarda a liberação para continuar\r\n     * await this.poStorage.requestIdlePromise();\r\n     *\r\n     * this.poStorage.lock();\r\n     *\r\n     * // Executa uma tarefa que irá ler e/ou escrever na base de dados configurada.\r\n     *\r\n     * this.poStorage.unlock();\r\n     * ```\r\n     *\r\n     * > É importante sempre utilizá-lo antes de executar os métodos `lock()` e `unlock()` para garantir que a tarefa só\r\n     * será executada caso o acesso esteja livre.\r\n     *\r\n     * @returns {Promise<any>} Promessa que é resolvida quando o acesso a base de dados configurada estiver liberado.\r\n     */\n\n  }, {\n    key: \"requestIdlePromise\",\n    value: function requestIdlePromise() {\n      return this.idleQueue.requestIdlePromise();\n    }\n    /**\r\n     * Grava um valor em uma determinada chave.\r\n     *\r\n     * @param {string} key Chave para o valor que será gravado.\r\n     * @param {any} value Valor que será gravado.\r\n     * @param {boolean} lock Define se irá travar a leitura e a escrita da base de dados para não ser acessada de forma paralela.\r\n     * Caso outra leitura/escrita já tenha sido iniciada, este método irá esperar o outro terminar para então começar.\r\n     *\r\n     * Padrão: `false`.\r\n     *\r\n     * > Esta definição só será válida se o outro acesso paralelo a este método também estiver com o parâmetro *lock* ativado.\r\n     * @returns {Promise<any>} Promessa que é resolvida após o valor ter sido gravado.\r\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      var lock = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var store, newValue;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.storagePromise;\n\n              case 2:\n                store = _context8.sent;\n                newValue = typeof value === 'object' ? JSON.parse(JSON.stringify(value)) : value;\n\n                if (!lock) {\n                  _context8.next = 8;\n                  break;\n                }\n\n                _context8.next = 7;\n                return this.requestIdlePromise();\n\n              case 7:\n                return _context8.abrupt(\"return\", this.idleQueue.wrapCall(function () {\n                  return store.setItem(key, newValue);\n                }));\n\n              case 8:\n                return _context8.abrupt(\"return\", store.setItem(key, newValue));\n\n              case 9:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n    }\n    /**\r\n     * Atribui um valor a uma propriedade de um objeto armazenado pela chave.\r\n     *\r\n     * Por exemplo:\r\n     *\r\n     * ``` typescript\r\n     * const clients = [ { name: 'Marie', age: 23 }, { name: 'Pether', age: 39 }];\r\n     *\r\n     * this.poStorageService.set('clientKey', clients).then(() => {});\r\n     *\r\n     * ...\r\n     *\r\n     * this.poStorageService.setIndexToObject('clientKey', 'name', 'Clare').then(() => {\r\n     *   // O objeto { name: 'Marie', age: 23 } passa a ser { name: 'Clare', age: 23 }\r\n     * });\r\n     * ```\r\n     *\r\n     * @param {string} key Chave do objeto.\r\n     * @param {string} property Nome da propriedade do objeto.\r\n     * @param {any} value Valor que será gravado na propriedade do objeto.\r\n     */\n\n  }, {\n    key: \"setIndexToObject\",\n    value: function setIndexToObject(key, property, value) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this.getObjectOfStorage(key);\n\n              case 2:\n                data = _context9.sent;\n                data[property] = value;\n                return _context9.abrupt(\"return\", this.set(key, data));\n\n              case 5:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n    }\n    /**\r\n     * Decrementa um valor na fila de bloqueio. Utilizado juntamente com o método `lock` para poder\r\n     * controlar a execução de uma determinada tarefa com o `PoStorage.requestIdlePromise()`.\r\n     *\r\n     * Veja mais no método: [`PoStorage.requestIdlePromise()`](documentation/po-storage#request-idle-promise).\r\n     */\n\n  }, {\n    key: \"unlock\",\n    value: function unlock() {\n      this.idleQueue.unlock();\n    }\n  }, {\n    key: \"getArrayOfStorage\",\n    value: function getArrayOfStorage(key) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this.get(key);\n\n              case 2:\n                data = _context10.sent;\n                return _context10.abrupt(\"return\", data || []);\n\n              case 4:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n    }\n  }, {\n    key: \"getImmutableItem\",\n    value: function getImmutableItem(key) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n        var store, items;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this.storagePromise;\n\n              case 2:\n                store = _context11.sent;\n                _context11.next = 5;\n                return store.getItem(key);\n\n              case 5:\n                items = _context11.sent;\n                return _context11.abrupt(\"return\", items ? JSON.parse(JSON.stringify(items)) : null);\n\n              case 7:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n    }\n  }, {\n    key: \"defineLocalForageDriver\",\n    value: function defineLocalForageDriver(localForageInstance, driverOrder) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return localForageInstance.defineDriver(this.lokijsDriver.getDriver());\n\n              case 2:\n                _context12.next = 4;\n                return this.setDriver(localForageInstance, driverOrder);\n\n              case 4:\n                return _context12.abrupt(\"return\", localForageInstance);\n\n              case 5:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n    }\n  }, {\n    key: \"getDriverOrder\",\n    value: function getDriverOrder(driverOrder) {\n      return driverOrder.map(function (driver) {\n        switch (driver) {\n          case 'indexeddb':\n            return LocalForage.INDEXEDDB;\n\n          case 'websql':\n            return LocalForage.WEBSQL;\n\n          case 'localstorage':\n            return LocalForage.LOCALSTORAGE;\n\n          default:\n            return driver;\n        }\n      });\n    }\n  }, {\n    key: \"getObjectOfStorage\",\n    value: function getObjectOfStorage(key) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this.get(key);\n\n              case 2:\n                data = _context13.sent;\n                return _context13.abrupt(\"return\", data || {});\n\n              case 4:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n    }\n  }, {\n    key: \"setDriver\",\n    value: function setDriver(localForageInstance, driverOrder) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return localForageInstance.setDriver(this.getDriverOrder(driverOrder));\n\n              case 2:\n                this.driver = localForageInstance.driver();\n\n              case 3:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n    }\n  }, {\n    key: \"setStoragePromise\",\n    value: function setStoragePromise(config) {\n      this.storagePromise = this.getStorageInstance(config);\n    }\n  }, {\n    key: \"getStorageInstance\",\n    value: function getStorageInstance(config) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {\n        var defaultConfig, actualConfig, localForageInstance;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                defaultConfig = PoStorageService.getDefaultConfig();\n                actualConfig = Object.assign(defaultConfig, config || {});\n                localForageInstance = LocalForage.createInstance(actualConfig);\n                _context15.prev = 3;\n                _context15.next = 6;\n                return this.defineLocalForageDriver(localForageInstance, actualConfig.driverOrder);\n\n              case 6:\n                return _context15.abrupt(\"return\", _context15.sent);\n\n              case 9:\n                _context15.prev = 9;\n                _context15.t0 = _context15[\"catch\"](3);\n                throw new Error(\"Cannot use this drivers: \".concat(actualConfig.driverOrder.join(', '), \".\"));\n\n              case 12:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this, [[3, 9]]);\n      }));\n    }\n  }], [{\n    key: \"getDefaultConfig\",\n    value: function getDefaultConfig() {\n      return {\n        name: '_postorage',\n        storeName: '_pokv',\n        driverOrder: ['websql', 'indexeddb', 'localstorage', 'lokijs']\n      };\n    }\n    /**\r\n     * Cria uma instância do `PoStorageService` com a configuração de armazenamento passada como parâmetro.\r\n     *\r\n     * @param {PoStorageConfig} storageConfig Configuração para o armazenamento.\r\n     * @returns {PoStorageService} Instância do `PoStorageService`.\r\n     */\n\n  }, {\n    key: \"providePoStorage\",\n    value: function providePoStorage(storageConfig) {\n      return new PoStorageService(PoStorageService.getConfig(storageConfig));\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig(storageConfig) {\n      return storageConfig || PoStorageService.getDefaultConfig();\n    }\n  }]);\n\n  return PoStorageService;\n}();\n\nPoStorageService.ɵfac = function PoStorageService_Factory(t) {\n  return new (t || PoStorageService)(ɵngcc0.ɵɵinject(PO_STORAGE_CONFIG_TOKEN));\n};\n\nPoStorageService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: PoStorageService,\n  factory: PoStorageService.ɵfac\n});\n\nPoStorageService.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [PO_STORAGE_CONFIG_TOKEN]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PoStorageService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PO_STORAGE_CONFIG_TOKEN]\n      }]\n    }];\n  }, null);\n})();\n/**\r\n * @description\r\n *\r\n * Módulo do componente PoStorage responsável por manipular o storage do browser.\r\n */\n\n\nvar PoStorageModule = /*#__PURE__*/function () {\n  function PoStorageModule() {\n    _classCallCheck(this, PoStorageModule);\n  }\n\n  _createClass(PoStorageModule, null, [{\n    key: \"forRoot\",\n    value: function forRoot(storageConfig) {\n      return {\n        ngModule: PoStorageModule,\n        providers: [{\n          provide: PO_STORAGE_CONFIG_TOKEN,\n          useValue: storageConfig || PoStorageService.getDefaultConfig()\n        }, {\n          provide: PoStorageService,\n          useFactory: PoStorageService.providePoStorage,\n          deps: [PO_STORAGE_CONFIG_TOKEN]\n        }]\n      };\n    }\n  }]);\n\n  return PoStorageModule;\n}();\n\nPoStorageModule.ɵfac = function PoStorageModule_Factory(t) {\n  return new (t || PoStorageModule)();\n};\n\nPoStorageModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: PoStorageModule\n});\nPoStorageModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PoStorageModule, [{\n    type: NgModule\n  }], null, null);\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { PoStorageModule, PoStorageService, PO_STORAGE_CONFIG_TOKEN as ɵa };","map":{"version":3,"sources":["C:\\Totvs\\po-angular\\dist\\projects\\storage\\src\\lib\\drivers\\lokijs\\po-loki-driver.ts","C:\\Totvs\\po-angular\\dist\\projects\\storage\\src\\lib\\services\\po-storage.service.ts","C:\\Totvs\\po-angular\\dist\\projects\\storage\\src\\lib\\po-storage.module.ts","C:\\Totvs\\po-angular\\dist\\projects\\storage\\src\\po-ui-ng-storage.ts"],"names":[],"mappings":"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","sourcesContent":["import Loki from 'lokijs';\r\nimport LokiIndexedAdapter from 'lokijs/src/loki-indexed-adapter';\r\n\r\nconst keyField = 'key';\r\n\r\nexport class PoLokiDriver {\r\n  private collection;\r\n  private db: any;\r\n  private driver: any;\r\n\r\n  constructor() {\r\n    const self = this;\r\n    this.driver = {\r\n      _driver: 'lokijs',\r\n      _initStorage: function (options: any) {\r\n        return self.initStorage(options);\r\n      },\r\n      clear: function () {\r\n        return self.clear(this);\r\n      },\r\n      getItem: function (key: any) {\r\n        return self.getItem(this, key);\r\n      },\r\n      iterate: function (iteratorCallback: any) {\r\n        return self.iterate(this, iteratorCallback);\r\n      },\r\n      key: function (n: any) {\r\n        return self.key(this, n);\r\n      },\r\n      keys: function () {\r\n        return self.keys(this);\r\n      },\r\n      length: function () {\r\n        return self.length(this);\r\n      },\r\n      removeItem: function (key: any) {\r\n        return self.removeItem(this, key);\r\n      },\r\n      setItem: function (key: any, value: any) {\r\n        return self.setItem(this, key, value);\r\n      }\r\n    };\r\n  }\r\n\r\n  // Funções de iteração\r\n\r\n  private clear(localforage: any) {\r\n    return new Promise(resolve => {\r\n      localforage.ready().then(() => {\r\n        if (this.hasCollectionAndDataInCollection()) {\r\n          this.clearCollection();\r\n        }\r\n        resolve(null);\r\n      });\r\n    });\r\n  }\r\n\r\n  private getItem(localforage: any, key: any) {\r\n    return new Promise(resolve => {\r\n      localforage.ready().then(() => {\r\n        if (this.hasCollectionAndDataInCollection()) {\r\n          const item = this.getItemInCollectionBy(keyField, key);\r\n          if (item) {\r\n            resolve(item.value);\r\n          }\r\n        }\r\n        resolve(null);\r\n      });\r\n    });\r\n  }\r\n\r\n  private initStorage(options: any) {\r\n    return new Promise(resolve => {\r\n      try {\r\n        this.configureLokiStorage(options, this.databaseInitialize.bind(this, options, resolve));\r\n      } catch {\r\n        throw new Error(`Cannot configure Loki Storage`);\r\n      }\r\n    });\r\n  }\r\n\r\n  private iterate(localforage: any, iteratorCallback: Function) {\r\n    return new Promise(resolve => {\r\n      localforage.ready().then(() => {\r\n        if (this.hasCollectionAndDataInCollection()) {\r\n          this.iterateWithDataItem(iteratorCallback);\r\n        }\r\n        resolve(null);\r\n      });\r\n    });\r\n  }\r\n\r\n  private key(localforage: any, n: string | number) {\r\n    return new Promise(resolve => {\r\n      localforage.ready().then(() => {\r\n        if (this.hasCollection()) {\r\n          const map = this.getLokiMap();\r\n          resolve(map[n]);\r\n        }\r\n        resolve(null);\r\n      });\r\n    });\r\n  }\r\n\r\n  private keys(localforage: any) {\r\n    return new Promise(resolve => {\r\n      localforage.ready().then(() => {\r\n        if (this.hasCollection()) {\r\n          const keys = [];\r\n          const map = this.getLokiMap();\r\n          for (const key of Object.keys(map)) {\r\n            keys.push(map[key]);\r\n          }\r\n          resolve(keys);\r\n        }\r\n        resolve(null);\r\n      });\r\n    });\r\n  }\r\n\r\n  private length(localforage: any) {\r\n    return new Promise(resolve => {\r\n      localforage.ready().then(() => {\r\n        if (this.hasCollection()) {\r\n          resolve(this.getNumberItensInCollection());\r\n        }\r\n        resolve(0);\r\n      });\r\n    });\r\n  }\r\n\r\n  private removeItem(localforage: any, key: any) {\r\n    return new Promise(resolve => {\r\n      localforage.ready().then(() => {\r\n        if (this.hasCollection()) {\r\n          this.findAndRemoveItem(key);\r\n        }\r\n        resolve(null);\r\n      });\r\n    });\r\n  }\r\n\r\n  private setItem(localforage: any, key: any, value: any) {\r\n    return new Promise(resolve => {\r\n      localforage.ready().then(() => {\r\n        if (this.hasCollection()) {\r\n          let item: any;\r\n          if (this.hasDataInCollection()) {\r\n            item = this.getItemInCollectionBy(keyField, key);\r\n          }\r\n          this.insertOrUpdate(item, value, key);\r\n        }\r\n        resolve(value);\r\n      });\r\n    });\r\n  }\r\n\r\n  // Funções de acesso ao storage\r\n\r\n  getDriver() {\r\n    return this.driver;\r\n  }\r\n\r\n  private addCollection(options: any): any {\r\n    return this.db.addCollection(options.storeName, { unique: [keyField] });\r\n  }\r\n\r\n  private clearCollection() {\r\n    this.collection.clear({ removeIndices: false });\r\n  }\r\n\r\n  private configureLokiStorage(options: any, databaseInitialize: any) {\r\n    const idbAdapter = new LokiIndexedAdapter();\r\n    this.db = new Loki(options.name, {\r\n      adapter: idbAdapter,\r\n      autoload: true,\r\n      autoloadCallback: databaseInitialize,\r\n      autosave: true,\r\n      autosaveInterval: 4000\r\n    });\r\n  }\r\n\r\n  private findAndRemoveItem(key: any) {\r\n    this.collection.findAndRemove({ [keyField]: key });\r\n  }\r\n\r\n  private getCollection(options: any): any {\r\n    return this.db.getCollection(options.storeName);\r\n  }\r\n\r\n  private databaseInitialize(options: any, resolve: Function) {\r\n    this.collection = this.getCollection(options);\r\n    if (!this.hasCollection()) {\r\n      this.collection = this.addCollection(options);\r\n    }\r\n    resolve();\r\n  }\r\n\r\n  private getItemInCollectionBy(fieldKey: string, key: any) {\r\n    return this.collection.by(fieldKey, key);\r\n  }\r\n\r\n  private getLokiMap() {\r\n    return this.collection.constraints.unique[keyField].lokiMap;\r\n  }\r\n\r\n  private hasCollection() {\r\n    return this.collection;\r\n  }\r\n\r\n  private hasDataInCollection() {\r\n    return this.collection.data && this.collection.data.length;\r\n  }\r\n\r\n  private hasCollectionAndDataInCollection() {\r\n    return this.hasCollection() && this.hasDataInCollection();\r\n  }\r\n\r\n  private insertOrUpdate(item: any, value: any, key: any) {\r\n    if (item) {\r\n      item.value = value;\r\n      this.collection.update(item);\r\n    } else {\r\n      this.collection.insert({ [keyField]: key, value: value });\r\n    }\r\n  }\r\n\r\n  private iterateWithDataItem(iteratorcallback: Function) {\r\n    this.collection.data.forEach(element => {\r\n      iteratorcallback(element.value, element[keyField], element.$loki);\r\n    });\r\n  }\r\n\r\n  private getNumberItensInCollection(): number {\r\n    return this.collection.count();\r\n  }\r\n}\r\n","import { Inject, Injectable, InjectionToken } from '@angular/core';\r\n\r\nimport * as LocalForage from 'localforage';\r\nimport 'localforage';\r\n\r\nimport IdleQueue from 'custom-idle-queue';\r\n\r\nimport { PoLokiDriver } from '../drivers/lokijs/po-loki-driver';\r\nimport { PoStorageConfig } from './po-storage-config.interface';\r\n\r\nexport const PO_STORAGE_CONFIG_TOKEN = new InjectionToken('PO_STORAGE_CONFIG_TOKEN');\r\n\r\n/**\r\n * @description\r\n *\r\n * O PO Storage é uma biblioteca que fornece um serviço para armazenamento de dados no dispositivo local, sendo semelhante\r\n * ao funcionamento do [IonicStorage](https://ionicframework.com/docs/storage/).\r\n * É possível utilizar os drivers [Websql](https://dev.w3.org/html5/webdatabase/), [Indexeddb](https://www.w3.org/TR/IndexedDB/),\r\n * [LocalStorage](https://html.spec.whatwg.org/multipage/webstorage.html) e também [LokiJS](https://github.com/techfort/LokiJS/wiki).\r\n *\r\n * Para um melhor ganho de performance ao buscar e salvar dados, recomendamos a utilização do `LokiJS`, um *database*\r\n * orientado a documento semelhante ao MongoDB, que além de permitir a persistência dos dados no dispositivo possibilita\r\n * também o armazenamento dos dados em memória. Outra vantagem, é o aumento do limite de armazenamento para\r\n * aproximadamente `300mb`.\r\n *\r\n * A estrutura utilizada para armazenar os dados é a de chave/valor, onde uma chave funciona como um identificador exclusivo.\r\n *\r\n * #### Instalando o PO Storage\r\n *\r\n * Para instalar o `po-storage` em sua aplicação execute o seguinte comando:\r\n *\r\n * ```shell\r\n * ng add @po-ui/ng-storage\r\n * ```\r\n * Será instalado o pacote `@po-ui/ng-storage` e também já importará `PoStorageModule` no módulo principal da sua aplicação, conforme abaixo:\r\n *\r\n * ```typescript\r\n * import { PoStorageModule } from '@po-ui/ng-storage';\r\n *\r\n * @NgModule({\r\n *  declarations: [...],\r\n *  imports: [\r\n *    // Importação do módulo PoStorageModule\r\n *    PoStorageModule.forRoot(),\r\n *  ],\r\n *  bootstrap: [IonicApp],\r\n *  providers: [...]\r\n * })\r\n * export class AppModule {}\r\n * ```\r\n *\r\n * Com a declaração do módulo, é criada uma base de dados no armazenamento local e o serviço `PoStorageService` estará\r\n * pronto para ser utilizada na sua aplicação.\r\n *\r\n * #### Configurando as opções de armazenamento\r\n *\r\n * Na importação do módulo, o método `PoStorageModule.forRoot()` pode receber como parâmetro um objeto do tipo\r\n * [`PoStorageConfig`](documentation/po-storage#po-storage-config),\r\n * que serve para configurar as opções personalizadas do armazenamento, como por exemplo: o tipo de armazenamento\r\n * preferêncial.\r\n *\r\n * Caso não seja passada nenhuma configuração a ordem padrão será: ['websql', 'indexeddb', 'localstorage', 'lokijs'].\r\n *\r\n * Abaixo segue um exemplo de configuração onde o storage preferencial passa a ser o `lokijs`:\r\n *\r\n * ```typescript\r\n * import { PoStorageModule } from '@po-ui/ng-storage';\r\n *\r\n * @NgModule({\r\n *  declarations: [...],\r\n *  imports: [\r\n *    // Importação do módulo PoStorageModule com a configuração personalizada\r\n *    PoStorageModule.forRoot({\r\n *      name: 'mystorage',\r\n *      storeName: '_mystore',\r\n *      driverOrder: ['lokijs', 'websql', 'indexeddb', 'localstorage']\r\n *    }),\r\n *  ],\r\n *  bootstrap: [IonicApp],\r\n *  providers: [...]\r\n * })\r\n * export class AppModule {}\r\n * ```\r\n */\r\n@Injectable()\r\nexport class PoStorageService {\r\n  private driver: string = null;\r\n  private idleQueue = new IdleQueue();\r\n  private storagePromise: Promise<LocalForage>;\r\n  private lokijsDriver: PoLokiDriver;\r\n\r\n  /**\r\n   * Retorna a configuração padrão para o armazenamento. Caso nenhuma configuração seja inserida,\r\n   * essa configuração será utilizada.\r\n   *\r\n   * @returns {PoStorageConfig} Objeto com a configuração padrão do armazenamento.\r\n   */\r\n  static getDefaultConfig(): PoStorageConfig {\r\n    return {\r\n      name: '_postorage',\r\n      storeName: '_pokv',\r\n      driverOrder: ['websql', 'indexeddb', 'localstorage', 'lokijs']\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Cria uma instância do `PoStorageService` com a configuração de armazenamento passada como parâmetro.\r\n   *\r\n   * @param {PoStorageConfig} storageConfig Configuração para o armazenamento.\r\n   * @returns {PoStorageService} Instância do `PoStorageService`.\r\n   */\r\n  static providePoStorage(storageConfig?: PoStorageConfig): PoStorageService {\r\n    return new PoStorageService(PoStorageService.getConfig(storageConfig));\r\n  }\r\n\r\n  private static getConfig(storageConfig?: PoStorageConfig) {\r\n    return storageConfig || PoStorageService.getDefaultConfig();\r\n  }\r\n\r\n  constructor(@Inject(PO_STORAGE_CONFIG_TOKEN) config?: PoStorageConfig) {\r\n    this.lokijsDriver = new PoLokiDriver();\r\n    this.setStoragePromise(config);\r\n  }\r\n\r\n  /**\r\n   * Busca uma lista armazenada pela chave e concatena com a lista passada por parâmetro.\r\n   *\r\n   * Por exemplo:\r\n   *\r\n   * ``` typescript\r\n   * const clients = [ { name: 'Marie', age: 23 }, { name: 'Pether', age: 39 }];\r\n   *\r\n   * this.poStorageService.set('clientKey', clients).then(() => {});\r\n   *\r\n   * ...\r\n   *\r\n   * const newClients = [ { name: 'Lisa', age: 36 }, { name: 'Bruce', age: 18 } ];\r\n   *\r\n   * this.poStorageService.appendArrayToArray('clientKey', newClients).then(() => {\r\n   *   // A lista agora será:\r\n   *   // [ { name: 'Marie', age: 23 }, { name: 'Pether', age: 39 }, { name: 'Lisa', age: 36 }, { name: 'Bruce', age: 18 }];\r\n   * });\r\n   * ```\r\n   *\r\n   * @param {string} key Chave da lista armazenada.\r\n   * @param {Array} value Lista que será concatenada.\r\n   *\r\n   * @returns {Promise<any>} Promessa que é resolvida após as duas listas serem concatenadas e armazenadas localmente.\r\n   */\r\n  async appendArrayToArray(key: string, value: Array<any>): Promise<any> {\r\n    const data = await this.getArrayOfStorage(key);\r\n\r\n    const newData = [...data, ...value];\r\n    return this.set(key, newData);\r\n  }\r\n\r\n  /**\r\n   * Acrescenta um item em uma lista armazenada pela chave.\r\n   *\r\n   * @param {string} key Chave da lista armazenada.\r\n   * @param {Array} value Item que será acrescentado na lista.\r\n   *\r\n   * @returns {Promise<any>} Promessa que é resolvida após o item ser acrescentado na lista armazenada.\r\n   */\r\n  async appendItemToArray(key: string, value: any): Promise<any> {\r\n    const data = await this.getArrayOfStorage(key);\r\n\r\n    data.push(value);\r\n    return this.set(key, data);\r\n  }\r\n\r\n  /**\r\n   * Remove todos os itens da base de dados local configurada na declaração do módulo `PoStorageModule`.\r\n   *\r\n   * > Utilize este método com cautela, para evitar a perda indesejada de dados.\r\n   *\r\n   * @returns {Promise<void>} Promessa que é resolvida após todos os itens da base de dados local serem removidos.\r\n   */\r\n  clear(): Promise<void> {\r\n    return this.storagePromise.then(store => store.clear());\r\n  }\r\n\r\n  /**\r\n   * Verifica se existe um valor dentro de uma determinada chave.\r\n   *\r\n   * @param {string} key Chave que será verificada.\r\n   *\r\n   * @returns {Promise<boolean>} Promessa que é resolvida quando a verificação da existência do valor na chave é concluída.\r\n   */\r\n  exists(key: string): Promise<boolean> {\r\n    return this.get(key).then(data => Promise.resolve(data !== null));\r\n  }\r\n\r\n  /**\r\n   * Itera sobre todas as chaves armazenadas.\r\n   *\r\n   * @param {any} iteratorCallback Função de `callback` que é chamada a cada iteração, com os seguintes parâmetros:\r\n   * valor, chave e número da iteração.\r\n   *\r\n   * Exemplo de utilização:\r\n   *\r\n   * ``` typescript\r\n   * this.poStorageService.forEach((value: any, key: string, iterationNumber: number) => {\r\n   *   // Iteração sobre cada chave armazenada.\r\n   * });\r\n   * ```\r\n   *\r\n   * @returns {Promise<void>} Promessa que é resolvida após a iteração sobre todas as chaves armazenadas.\r\n   */\r\n  forEach(iteratorCallback: (value: any, key: string, iterationNumber: number) => any): Promise<void> {\r\n    return this.storagePromise.then(store => store.iterate(iteratorCallback));\r\n  }\r\n\r\n  /**\r\n   * Retorna o valor armazenado em uma determinada chave.\r\n   *\r\n   * @param {string} key Chave que identifica o item.\r\n   * @param {boolean} lock Define se irá travar a leitura e a escrita da base de dados para não ser acessada de forma paralela.\r\n   * Caso outra leitura/escrita já tenha sido iniciada, este método irá esperar o outro terminar para então começar.\r\n   *\r\n   * Padrão: `false`.\r\n   *\r\n   * > Esta definição só será válida se o outro acesso paralelo a este método também estiver com o parâmetro *lock* ativado.\r\n   * @returns {Promise<any>} Promessa que é resolvida após o item ser buscado.\r\n   */\r\n  async get(key: string, lock: boolean = false): Promise<any> {\r\n    if (lock) {\r\n      await this.requestIdlePromise();\r\n      return await this.idleQueue.wrapCall(async () => {\r\n        await this.getImmutableItem(key);\r\n      });\r\n    }\r\n    return await this.getImmutableItem(key);\r\n  }\r\n\r\n  /**\r\n   * Retorna o nome do *driver* que está sendo usado para armazenar os dados, por exemplo: localStorage.\r\n   *\r\n   * @returns {string | null} Nome do *driver*.\r\n   */\r\n  getDriver(): string {\r\n    return this.driver;\r\n  }\r\n\r\n  /**\r\n   * Retorna o primeiro item de uma lista para uma determinada chave.\r\n   *\r\n   * @param {string} key Chave da lista.\r\n   * @returns {Promise<any>} Promessa que é resolvida após o primeiro item ser encontrado.\r\n   */\r\n  getFirstItem(key: string): Promise<any> {\r\n    return this.get(key).then((data: Array<any>) => Promise.resolve(data ? data[0] : null));\r\n  }\r\n\r\n  /**\r\n   * Remove o primeiro item de uma lista a partir da chave.\r\n   *\r\n   * @param {string} key Chave da lista que será removido o primeiro item.\r\n   * @returns {Promise<any>} Promessa que é resolvida após o primeiro item da lista ser removido.\r\n   */\r\n  getItemAndRemove(key: string): Promise<any> {\r\n    return this.get(key).then((data: Array<any>) => {\r\n      if (data === null) {\r\n        return null;\r\n      }\r\n\r\n      const item = data.shift();\r\n      return this.set(key, data).then(() => Promise.resolve(item));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Busca o primeiro objeto encontrado dentro de uma lista pelo do valor de um campo.\r\n   *\r\n   * Por exemplo:\r\n   *\r\n   * ``` typescript\r\n   * const clients = [ { name: 'Marie', age: 23 }, { name: 'Pether', age: 39 }];\r\n   *\r\n   * this.poStorageService.set('clientKey', clients).then(() => {});\r\n   *\r\n   * ...\r\n   *\r\n   * this.poStorageService.getItemByField('clientKey', 'name', 'Marie').then(client => {\r\n   *   // Resultado do console.log: { name: 'Marie', age: 23 }\r\n   *   console.log(client);\r\n   * });\r\n   * ```\r\n   *\r\n   * @param {string} key Chave da lista.\r\n   * @param {string} fieldName O campo a ser filtrado.\r\n   * @param {any} fieldValue O valor do campo.\r\n   * @returns {Promise<any>} Promessa que é resolvida com o item que foi encontrado.\r\n   */\r\n  getItemByField(key: string, fieldName: string, fieldValue: any): Promise<any> {\r\n    return this.get(key).then((storageRecords: Array<any>) => {\r\n      let storageRecordsFiltered = storageRecords.find(storageRecord => storageRecord[fieldName] === fieldValue);\r\n      storageRecordsFiltered = storageRecordsFiltered || null;\r\n\r\n      return Promise.resolve(storageRecordsFiltered);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Lista com todas as chaves armazenadas.\r\n   * @returns {Promise<Array<string>>} Promessa que é resolvida com todas as chaves armazenadas.\r\n   */\r\n  keys(): Promise<Array<string>> {\r\n    return this.storagePromise.then(store => store.keys());\r\n  }\r\n\r\n  /**\r\n   * Quantidade de chaves armazenadas.\r\n   * @returns {Promise<number>} Promessa que é resolvida com o número de chaves armazenadas.\r\n   */\r\n  length(): Promise<number> {\r\n    return this.storagePromise.then(store => store.length());\r\n  }\r\n\r\n  /**\r\n   * Utilizado para gerenciar o bloqueio e desbloqueio de recursos no `PoStorageService`.\r\n   * Aguardando a liberação da utilização dos recursos que participam deste comportamento e posteriormente envolve o recurso\r\n   * passado como parâmetro em um comportamento de bloqueio e desbloqueio.\r\n   *\r\n   * Este método se comporta igual a utilização em conjunta dos métodos: `PoStorageService.requestIdlePromise()`,\r\n   * `PoStorageService.lock()` e `PoStorageService.unlook()`.\r\n   *\r\n   * Veja mais no método: [`PoStorage.requestIdlePromise()`](documentation/po-storage#request-idle-promise).\r\n   *\r\n   * @param {Function} limitedResource Função que será envolvida no comportamento de bloqueio e desbloqueio.\r\n   */\r\n  async limitedCallWrap(limitedResource: Function): Promise<any> {\r\n    await this.requestIdlePromise();\r\n    return this.idleQueue.wrapCall(limitedResource);\r\n  }\r\n\r\n  /**\r\n   * Incrementa um valor na fila de bloqueio do `PoStorageService`. Utilizado juntamente com o método `unlock` para poder\r\n   * controlar a execução de uma determinada tarefa com o `PoStorage.requestIdlePromise()`.\r\n   *\r\n   * Veja mais no método: [`PoStorage.requestIdlePromise()`](documentation/po-storage#request-idle-promise).\r\n   */\r\n  lock() {\r\n    this.idleQueue.lock();\r\n  }\r\n\r\n  /**\r\n   * Determina se o processo de inicialização do *driver* assíncrono foi concluído.\r\n   *\r\n   * @returns {Promise<LocalForage>} Promessa que é resolvida quando o processo de inicialização do *driver* assíncrono\r\n   * for concluído.\r\n   */\r\n  ready(): Promise<LocalForage> {\r\n    return this.storagePromise;\r\n  }\r\n\r\n  /**\r\n   * Remove um valor associado a uma chave.\r\n   *\r\n   * @param {key} key Chave do valor que será removido.\r\n   * @returns {Promise<any>} Promessa que é resolvida após o valor ser removido.\r\n   */\r\n  remove(key: string): Promise<any> {\r\n    return this.storagePromise.then(store => store.removeItem(key));\r\n  }\r\n\r\n  /**\r\n   * Remove uma propriedade de um objeto armazenado.\r\n   *\r\n   * @param {string} key Chave do objeto armazenado.\r\n   * @param {string} property Propriedade que será removida.\r\n   *\r\n   * @returns {Promise<any>} Promessa que é resolvida após a propriedade ser removida.\r\n   */\r\n  async removeIndexFromObject(key: string, property: string): Promise<any> {\r\n    const data = await this.getObjectOfStorage(key);\r\n\r\n    delete data[property];\r\n    return this.set(key, data);\r\n  }\r\n\r\n  /**\r\n   * Remove um objeto de uma lista armazenada pelo valor de uma propriedade.\r\n   *\r\n   * Por exemplo:\r\n   *\r\n   * ``` typescript\r\n   * const clients = [ { name: 'Marie', age: 23 }, { name: 'Pether', age: 39 }];\r\n   *\r\n   * this.poStorageService.set('clientKey', clients).then(() => {});\r\n   *\r\n   * ...\r\n   *\r\n   * this.poStorageService.removeItemFromArray('clientKey', 'name', 'Marie').then(() => {\r\n   *   // O objeto { name: 'Marie', age: 23 } foi removido da lista que está na chave 'clientKey'\r\n   * });\r\n   * ```\r\n   *\r\n   * @param {string} key Chave da lista que contém o item que será removido.\r\n   * @param {string} field O campo a ser filtrado no item.\r\n   * @param {string} value O valor do filtro.\r\n   * @returns {Promise<any>} Promessa que é resolvida quando o objeto for removido da lista.\r\n   */\r\n  async removeItemFromArray(key: string, field: string, value: any): Promise<any> {\r\n    let data = await this.getArrayOfStorage(key);\r\n\r\n    data = data.filter(item => item[field] !== value);\r\n    return this.set(key, data);\r\n  }\r\n\r\n  /**\r\n   * <a id=\"request-idle-promise\"></a>\r\n   * Método que verifica se o acesso a base de dados configurada está liberado.\r\n   *\r\n   * Utilizado em conjunto com os métodos `lock()` e `unlock()` entre tarefas que não podem ser executadas de forma\r\n   * paralela, para não causar inconsistências nos dados.\r\n   *\r\n   * Exemplo de utilização:\r\n   *\r\n   * ```\r\n   * // Aguarda a liberação para continuar\r\n   * await this.poStorage.requestIdlePromise();\r\n   *\r\n   * this.poStorage.lock();\r\n   *\r\n   * // Executa uma tarefa que irá ler e/ou escrever na base de dados configurada.\r\n   *\r\n   * this.poStorage.unlock();\r\n   * ```\r\n   *\r\n   * > É importante sempre utilizá-lo antes de executar os métodos `lock()` e `unlock()` para garantir que a tarefa só\r\n   * será executada caso o acesso esteja livre.\r\n   *\r\n   * @returns {Promise<any>} Promessa que é resolvida quando o acesso a base de dados configurada estiver liberado.\r\n   */\r\n  requestIdlePromise(): Promise<any> {\r\n    return this.idleQueue.requestIdlePromise();\r\n  }\r\n\r\n  /**\r\n   * Grava um valor em uma determinada chave.\r\n   *\r\n   * @param {string} key Chave para o valor que será gravado.\r\n   * @param {any} value Valor que será gravado.\r\n   * @param {boolean} lock Define se irá travar a leitura e a escrita da base de dados para não ser acessada de forma paralela.\r\n   * Caso outra leitura/escrita já tenha sido iniciada, este método irá esperar o outro terminar para então começar.\r\n   *\r\n   * Padrão: `false`.\r\n   *\r\n   * > Esta definição só será válida se o outro acesso paralelo a este método também estiver com o parâmetro *lock* ativado.\r\n   * @returns {Promise<any>} Promessa que é resolvida após o valor ter sido gravado.\r\n   */\r\n  async set(key: string, value: any, lock: boolean = false): Promise<any> {\r\n    const store = await this.storagePromise;\r\n    const newValue = typeof value === 'object' ? JSON.parse(JSON.stringify(value)) : value;\r\n\r\n    if (lock) {\r\n      await this.requestIdlePromise();\r\n      return this.idleQueue.wrapCall(() => store.setItem(key, newValue));\r\n    }\r\n\r\n    return store.setItem(key, newValue);\r\n  }\r\n\r\n  /**\r\n   * Atribui um valor a uma propriedade de um objeto armazenado pela chave.\r\n   *\r\n   * Por exemplo:\r\n   *\r\n   * ``` typescript\r\n   * const clients = [ { name: 'Marie', age: 23 }, { name: 'Pether', age: 39 }];\r\n   *\r\n   * this.poStorageService.set('clientKey', clients).then(() => {});\r\n   *\r\n   * ...\r\n   *\r\n   * this.poStorageService.setIndexToObject('clientKey', 'name', 'Clare').then(() => {\r\n   *   // O objeto { name: 'Marie', age: 23 } passa a ser { name: 'Clare', age: 23 }\r\n   * });\r\n   * ```\r\n   *\r\n   * @param {string} key Chave do objeto.\r\n   * @param {string} property Nome da propriedade do objeto.\r\n   * @param {any} value Valor que será gravado na propriedade do objeto.\r\n   */\r\n  async setIndexToObject(key: string, property: string, value: any): Promise<any> {\r\n    const data = await this.getObjectOfStorage(key);\r\n\r\n    data[property] = value;\r\n    return this.set(key, data);\r\n  }\r\n\r\n  /**\r\n   * Decrementa um valor na fila de bloqueio. Utilizado juntamente com o método `lock` para poder\r\n   * controlar a execução de uma determinada tarefa com o `PoStorage.requestIdlePromise()`.\r\n   *\r\n   * Veja mais no método: [`PoStorage.requestIdlePromise()`](documentation/po-storage#request-idle-promise).\r\n   */\r\n  unlock() {\r\n    this.idleQueue.unlock();\r\n  }\r\n\r\n  private async getArrayOfStorage(key: string) {\r\n    const data = await this.get(key);\r\n    return data || [];\r\n  }\r\n\r\n  private async getImmutableItem(key: string) {\r\n    const store = await this.storagePromise;\r\n    const items = await store.getItem(key);\r\n    return items ? JSON.parse(JSON.stringify(items)) : null;\r\n  }\r\n\r\n  private async defineLocalForageDriver(localForageInstance: any, driverOrder) {\r\n    await localForageInstance.defineDriver(this.lokijsDriver.getDriver());\r\n    await this.setDriver(localForageInstance, driverOrder);\r\n    return localForageInstance;\r\n  }\r\n\r\n  private getDriverOrder(driverOrder: Array<string>): Array<string> {\r\n    return driverOrder.map(driver => {\r\n      switch (driver) {\r\n        case 'indexeddb':\r\n          return LocalForage.INDEXEDDB;\r\n        case 'websql':\r\n          return LocalForage.WEBSQL;\r\n        case 'localstorage':\r\n          return LocalForage.LOCALSTORAGE;\r\n        default:\r\n          return driver;\r\n      }\r\n    });\r\n  }\r\n\r\n  private async getObjectOfStorage(key: string) {\r\n    const data = await this.get(key);\r\n    return data || {};\r\n  }\r\n\r\n  private async setDriver(localForageInstance: LocalForage, driverOrder) {\r\n    await localForageInstance.setDriver(this.getDriverOrder(driverOrder));\r\n    this.driver = localForageInstance.driver();\r\n  }\r\n\r\n  private setStoragePromise(config: PoStorageConfig) {\r\n    this.storagePromise = this.getStorageInstance(config);\r\n  }\r\n\r\n  private async getStorageInstance(config: PoStorageConfig) {\r\n    const defaultConfig = PoStorageService.getDefaultConfig();\r\n    const actualConfig = Object.assign(defaultConfig, config || {});\r\n\r\n    const localForageInstance = LocalForage.createInstance(actualConfig);\r\n\r\n    try {\r\n      return await this.defineLocalForageDriver(localForageInstance, actualConfig.driverOrder);\r\n    } catch {\r\n      throw new Error(`Cannot use this drivers: ${actualConfig.driverOrder.join(', ')}.`);\r\n    }\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\n\r\nimport { PoStorageConfig } from './services/po-storage-config.interface';\r\nimport { PoStorageService, PO_STORAGE_CONFIG_TOKEN } from './services/po-storage.service';\r\n\r\n/**\r\n * @description\r\n *\r\n * Módulo do componente PoStorage responsável por manipular o storage do browser.\r\n */\r\n\r\n@NgModule()\r\nexport class PoStorageModule {\r\n  static forRoot(storageConfig?: PoStorageConfig): ModuleWithProviders<PoStorageModule> {\r\n    return {\r\n      ngModule: PoStorageModule,\r\n      providers: [\r\n        {\r\n          provide: PO_STORAGE_CONFIG_TOKEN,\r\n          useValue: storageConfig || PoStorageService.getDefaultConfig()\r\n        },\r\n        {\r\n          provide: PoStorageService,\r\n          useFactory: PoStorageService.providePoStorage,\r\n          deps: [PO_STORAGE_CONFIG_TOKEN]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {PO_STORAGE_CONFIG_TOKEN as ɵa} from './lib/services/po-storage.service';"]},"metadata":{},"sourceType":"module"}