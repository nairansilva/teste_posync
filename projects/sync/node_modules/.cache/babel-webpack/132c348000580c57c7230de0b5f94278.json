{"ast":null,"code":"/*!\nCopyright (C) 2013 by WebReflection\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\nvar // should be a not so common char\n// possibly one JSON does not encode\n// possibly one encodeURIComponent does not encode\n// right now this char is '~' but this might change in the future\nspecialChar = '~',\n    safeSpecialChar = '\\\\x' + ('0' + specialChar.charCodeAt(0).toString(16)).slice(-2),\n    escapedSafeSpecialChar = '\\\\' + safeSpecialChar,\n    specialCharRG = new RegExp(safeSpecialChar, 'g'),\n    safeSpecialCharRG = new RegExp(escapedSafeSpecialChar, 'g'),\n    safeStartWithSpecialCharRG = new RegExp('(?:^|([^\\\\\\\\]))' + escapedSafeSpecialChar),\n    indexOf = [].indexOf || function (v) {\n  for (var i = this.length; i-- && this[i] !== v;) {\n    ;\n  }\n\n  return i;\n},\n    $String = String // there's no way to drop warnings in JSHint\n// about new String ... well, I need that here!\n// faked, and happy linter!\n;\n\nfunction generateReplacer(value, replacer, resolve) {\n  var path = [],\n      all = [value],\n      seen = [value],\n      mapp = [resolve ? specialChar : '[Circular]'],\n      last = value,\n      lvl = 1,\n      i;\n  return function (key, value) {\n    // the replacer has rights to decide\n    // if a new object should be returned\n    // or if there's some key to drop\n    // let's call it here rather than \"too late\"\n    if (replacer) value = replacer.call(this, key, value); // did you know ? Safari passes keys as integers for arrays\n    // which means if (key) when key === 0 won't pass the check\n\n    if (key !== '') {\n      if (last !== this) {\n        i = lvl - indexOf.call(all, this) - 1;\n        lvl -= i;\n        all.splice(lvl, all.length);\n        path.splice(lvl - 1, path.length);\n        last = this;\n      } // console.log(lvl, key, path);\n\n\n      if (typeof value === 'object' && value) {\n        // if object isn't referring to parent object, add to the\n        // object path stack. Otherwise it is already there.\n        if (indexOf.call(all, value) < 0) {\n          all.push(last = value);\n        }\n\n        lvl = all.length;\n        i = indexOf.call(seen, value);\n\n        if (i < 0) {\n          i = seen.push(value) - 1;\n\n          if (resolve) {\n            // key cannot contain specialChar but could be not a string\n            path.push(('' + key).replace(specialCharRG, safeSpecialChar));\n            mapp[i] = specialChar + path.join(specialChar);\n          } else {\n            mapp[i] = mapp[0];\n          }\n        } else {\n          value = mapp[i];\n        }\n      } else {\n        if (typeof value === 'string' && resolve) {\n          // ensure no special char involved on deserialization\n          // in this case only first char is important\n          // no need to replace all value (better performance)\n          value = value.replace(safeSpecialChar, escapedSafeSpecialChar).replace(specialChar, safeSpecialChar);\n        }\n      }\n    }\n\n    return value;\n  };\n}\n\nfunction retrieveFromPath(current, keys) {\n  for (var i = 0, length = keys.length; i < length; current = current[// keys should be normalized back here\n  keys[i++].replace(safeSpecialCharRG, specialChar)]) {\n    ;\n  }\n\n  return current;\n}\n\nfunction generateReviver(reviver) {\n  return function (key, value) {\n    var isString = typeof value === 'string';\n\n    if (isString && value.charAt(0) === specialChar) {\n      return new $String(value.slice(1));\n    }\n\n    if (key === '') value = regenerate(value, value, {}); // again, only one needed, do not use the RegExp for this replacement\n    // only keys need the RegExp\n\n    if (isString) value = value.replace(safeStartWithSpecialCharRG, '$1' + specialChar).replace(escapedSafeSpecialChar, safeSpecialChar);\n    return reviver ? reviver.call(this, key, value) : value;\n  };\n}\n\nfunction regenerateArray(root, current, retrieve) {\n  for (var i = 0, length = current.length; i < length; i++) {\n    current[i] = regenerate(root, current[i], retrieve);\n  }\n\n  return current;\n}\n\nfunction regenerateObject(root, current, retrieve) {\n  for (var key in current) {\n    if (current.hasOwnProperty(key)) {\n      current[key] = regenerate(root, current[key], retrieve);\n    }\n  }\n\n  return current;\n}\n\nfunction regenerate(root, current, retrieve) {\n  return current instanceof Array ? // fast Array reconstruction\n  regenerateArray(root, current, retrieve) : current instanceof $String ? // root is an empty string\n  current.length ? retrieve.hasOwnProperty(current) ? retrieve[current] : retrieve[current] = retrieveFromPath(root, current.split(specialChar)) : root : current instanceof Object ? // dedicated Object parser\n  regenerateObject(root, current, retrieve) : // value as it is\n  current;\n}\n\nfunction stringifyRecursion(value, replacer, space, doNotResolve) {\n  return JSON.stringify(value, generateReplacer(value, replacer, !doNotResolve), space);\n}\n\nfunction parseRecursion(text, reviver) {\n  return JSON.parse(text, generateReviver(reviver));\n}\n\nthis.stringify = stringifyRecursion;\nthis.parse = parseRecursion;","map":{"version":3,"sources":["C:/Totvs/po-angular/node_modules/circular-json/build/circular-json.node.js"],"names":["specialChar","safeSpecialChar","charCodeAt","toString","slice","escapedSafeSpecialChar","specialCharRG","RegExp","safeSpecialCharRG","safeStartWithSpecialCharRG","indexOf","v","i","length","$String","String","generateReplacer","value","replacer","resolve","path","all","seen","mapp","last","lvl","key","call","splice","push","replace","join","retrieveFromPath","current","keys","generateReviver","reviver","isString","charAt","regenerate","regenerateArray","root","retrieve","regenerateObject","hasOwnProperty","Array","split","Object","stringifyRecursion","space","doNotResolve","JSON","stringify","parseRecursion","text","parse"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACE;AACA;AACA;AACA;AACAA,WAAW,GAAG,GALhB;AAAA,IAMEC,eAAe,GAAG,QAAQ,CACxB,MAAMD,WAAW,CAACE,UAAZ,CAAuB,CAAvB,EAA0BC,QAA1B,CAAmC,EAAnC,CADkB,EAExBC,KAFwB,CAElB,CAAC,CAFiB,CAN5B;AAAA,IASEC,sBAAsB,GAAG,OAAOJ,eATlC;AAAA,IAUEK,aAAa,GAAG,IAAIC,MAAJ,CAAWN,eAAX,EAA4B,GAA5B,CAVlB;AAAA,IAWEO,iBAAiB,GAAG,IAAID,MAAJ,CAAWF,sBAAX,EAAmC,GAAnC,CAXtB;AAAA,IAaEI,0BAA0B,GAAG,IAAIF,MAAJ,CAAW,oBAAoBF,sBAA/B,CAb/B;AAAA,IAeEK,OAAO,GAAG,GAAGA,OAAH,IAAc,UAASC,CAAT,EAAW;AACjC,OAAI,IAAIC,CAAC,GAAC,KAAKC,MAAf,EAAsBD,CAAC,MAAI,KAAKA,CAAL,MAAUD,CAArC;AAAwC;AAAxC;;AACA,SAAOC,CAAP;AACD,CAlBH;AAAA,IAmBEE,OAAO,GAAGC,MAnBZ,CAmBoB;AACA;AACA;AArBpB;;AAwBA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiCC,QAAjC,EAA2CC,OAA3C,EAAoD;AAClD,MACEC,IAAI,GAAG,EADT;AAAA,MAEEC,GAAG,GAAI,CAACJ,KAAD,CAFT;AAAA,MAGEK,IAAI,GAAG,CAACL,KAAD,CAHT;AAAA,MAIEM,IAAI,GAAG,CAACJ,OAAO,GAAGnB,WAAH,GAAiB,YAAzB,CAJT;AAAA,MAKEwB,IAAI,GAAGP,KALT;AAAA,MAMEQ,GAAG,GAAI,CANT;AAAA,MAOEb,CAPF;AASA,SAAO,UAASc,GAAT,EAAcT,KAAd,EAAqB;AAC1B;AACA;AACA;AACA;AACA,QAAIC,QAAJ,EAAcD,KAAK,GAAGC,QAAQ,CAACS,IAAT,CAAc,IAAd,EAAoBD,GAApB,EAAyBT,KAAzB,CAAR,CALY,CAO1B;AACA;;AACA,QAAIS,GAAG,KAAK,EAAZ,EAAgB;AACd,UAAIF,IAAI,KAAK,IAAb,EAAmB;AACjBZ,QAAAA,CAAC,GAAGa,GAAG,GAAGf,OAAO,CAACiB,IAAR,CAAaN,GAAb,EAAkB,IAAlB,CAAN,GAAgC,CAApC;AACAI,QAAAA,GAAG,IAAIb,CAAP;AACAS,QAAAA,GAAG,CAACO,MAAJ,CAAWH,GAAX,EAAgBJ,GAAG,CAACR,MAApB;AACAO,QAAAA,IAAI,CAACQ,MAAL,CAAYH,GAAG,GAAG,CAAlB,EAAqBL,IAAI,CAACP,MAA1B;AACAW,QAAAA,IAAI,GAAG,IAAP;AACD,OAPa,CAQd;;;AACA,UAAI,OAAOP,KAAP,KAAiB,QAAjB,IAA6BA,KAAjC,EAAwC;AACzC;AACG;AACA,YAAIP,OAAO,CAACiB,IAAR,CAAaN,GAAb,EAAkBJ,KAAlB,IAA2B,CAA/B,EAAkC;AAChCI,UAAAA,GAAG,CAACQ,IAAJ,CAASL,IAAI,GAAGP,KAAhB;AACD;;AACDQ,QAAAA,GAAG,GAAGJ,GAAG,CAACR,MAAV;AACAD,QAAAA,CAAC,GAAGF,OAAO,CAACiB,IAAR,CAAaL,IAAb,EAAmBL,KAAnB,CAAJ;;AACA,YAAIL,CAAC,GAAG,CAAR,EAAW;AACTA,UAAAA,CAAC,GAAGU,IAAI,CAACO,IAAL,CAAUZ,KAAV,IAAmB,CAAvB;;AACA,cAAIE,OAAJ,EAAa;AACX;AACAC,YAAAA,IAAI,CAACS,IAAL,CAAU,CAAC,KAAKH,GAAN,EAAWI,OAAX,CAAmBxB,aAAnB,EAAkCL,eAAlC,CAAV;AACAsB,YAAAA,IAAI,CAACX,CAAD,CAAJ,GAAUZ,WAAW,GAAGoB,IAAI,CAACW,IAAL,CAAU/B,WAAV,CAAxB;AACD,WAJD,MAIO;AACLuB,YAAAA,IAAI,CAACX,CAAD,CAAJ,GAAUW,IAAI,CAAC,CAAD,CAAd;AACD;AACF,SATD,MASO;AACLN,UAAAA,KAAK,GAAGM,IAAI,CAACX,CAAD,CAAZ;AACD;AACF,OApBD,MAoBO;AACL,YAAI,OAAOK,KAAP,KAAiB,QAAjB,IAA6BE,OAAjC,EAA0C;AACxC;AACA;AACA;AACAF,UAAAA,KAAK,GAAGA,KAAK,CAAEa,OAAP,CAAe7B,eAAf,EAAgCI,sBAAhC,EACOyB,OADP,CACe9B,WADf,EAC4BC,eAD5B,CAAR;AAED;AACF;AACF;;AACD,WAAOgB,KAAP;AACD,GAjDD;AAkDD;;AAED,SAASe,gBAAT,CAA0BC,OAA1B,EAAmCC,IAAnC,EAAyC;AACvC,OAAI,IAAItB,CAAC,GAAG,CAAR,EAAWC,MAAM,GAAGqB,IAAI,CAACrB,MAA7B,EAAqCD,CAAC,GAAGC,MAAzC,EAAiDoB,OAAO,GAAGA,OAAO,CAChE;AACAC,EAAAA,IAAI,CAACtB,CAAC,EAAF,CAAJ,CAAUkB,OAAV,CAAkBtB,iBAAlB,EAAqCR,WAArC,CAFgE,CAAlE;AAGE;AAHF;;AAIA,SAAOiC,OAAP;AACD;;AAED,SAASE,eAAT,CAAyBC,OAAzB,EAAkC;AAChC,SAAO,UAASV,GAAT,EAAcT,KAAd,EAAqB;AAC1B,QAAIoB,QAAQ,GAAG,OAAOpB,KAAP,KAAiB,QAAhC;;AACA,QAAIoB,QAAQ,IAAIpB,KAAK,CAACqB,MAAN,CAAa,CAAb,MAAoBtC,WAApC,EAAiD;AAC/C,aAAO,IAAIc,OAAJ,CAAYG,KAAK,CAACb,KAAN,CAAY,CAAZ,CAAZ,CAAP;AACD;;AACD,QAAIsB,GAAG,KAAK,EAAZ,EAAgBT,KAAK,GAAGsB,UAAU,CAACtB,KAAD,EAAQA,KAAR,EAAe,EAAf,CAAlB,CALU,CAM1B;AACA;;AACA,QAAIoB,QAAJ,EAAcpB,KAAK,GAAGA,KAAK,CAAEa,OAAP,CAAerB,0BAAf,EAA2C,OAAOT,WAAlD,EACO8B,OADP,CACezB,sBADf,EACuCJ,eADvC,CAAR;AAEd,WAAOmC,OAAO,GAAGA,OAAO,CAACT,IAAR,CAAa,IAAb,EAAmBD,GAAnB,EAAwBT,KAAxB,CAAH,GAAoCA,KAAlD;AACD,GAXD;AAYD;;AAED,SAASuB,eAAT,CAAyBC,IAAzB,EAA+BR,OAA/B,EAAwCS,QAAxC,EAAkD;AAChD,OAAK,IAAI9B,CAAC,GAAG,CAAR,EAAWC,MAAM,GAAGoB,OAAO,CAACpB,MAAjC,EAAyCD,CAAC,GAAGC,MAA7C,EAAqDD,CAAC,EAAtD,EAA0D;AACxDqB,IAAAA,OAAO,CAACrB,CAAD,CAAP,GAAa2B,UAAU,CAACE,IAAD,EAAOR,OAAO,CAACrB,CAAD,CAAd,EAAmB8B,QAAnB,CAAvB;AACD;;AACD,SAAOT,OAAP;AACD;;AAED,SAASU,gBAAT,CAA0BF,IAA1B,EAAgCR,OAAhC,EAAyCS,QAAzC,EAAmD;AACjD,OAAK,IAAIhB,GAAT,IAAgBO,OAAhB,EAAyB;AACvB,QAAIA,OAAO,CAACW,cAAR,CAAuBlB,GAAvB,CAAJ,EAAiC;AAC/BO,MAAAA,OAAO,CAACP,GAAD,CAAP,GAAea,UAAU,CAACE,IAAD,EAAOR,OAAO,CAACP,GAAD,CAAd,EAAqBgB,QAArB,CAAzB;AACD;AACF;;AACD,SAAOT,OAAP;AACD;;AAED,SAASM,UAAT,CAAoBE,IAApB,EAA0BR,OAA1B,EAAmCS,QAAnC,EAA6C;AAC3C,SAAOT,OAAO,YAAYY,KAAnB,GACL;AACAL,EAAAA,eAAe,CAACC,IAAD,EAAOR,OAAP,EAAgBS,QAAhB,CAFV,GAIHT,OAAO,YAAYnB,OAAnB,GAEI;AACAmB,EAAAA,OAAO,CAACpB,MAAR,GAEI6B,QAAQ,CAACE,cAAT,CAAwBX,OAAxB,IACES,QAAQ,CAACT,OAAD,CADV,GAEES,QAAQ,CAACT,OAAD,CAAR,GAAoBD,gBAAgB,CAClCS,IADkC,EAC5BR,OAAO,CAACa,KAAR,CAAc9C,WAAd,CAD4B,CAJ1C,GAQEyC,IAXN,GAcIR,OAAO,YAAYc,MAAnB,GACE;AACAJ,EAAAA,gBAAgB,CAACF,IAAD,EAAOR,OAAP,EAAgBS,QAAhB,CAFlB,GAGE;AACAT,EAAAA,OAtBV;AA0BD;;AAED,SAASe,kBAAT,CAA4B/B,KAA5B,EAAmCC,QAAnC,EAA6C+B,KAA7C,EAAoDC,YAApD,EAAkE;AAChE,SAAOC,IAAI,CAACC,SAAL,CAAenC,KAAf,EAAsBD,gBAAgB,CAACC,KAAD,EAAQC,QAAR,EAAkB,CAACgC,YAAnB,CAAtC,EAAwED,KAAxE,CAAP;AACD;;AAED,SAASI,cAAT,CAAwBC,IAAxB,EAA8BlB,OAA9B,EAAuC;AACrC,SAAOe,IAAI,CAACI,KAAL,CAAWD,IAAX,EAAiBnB,eAAe,CAACC,OAAD,CAAhC,CAAP;AACD;;AACD,KAAKgB,SAAL,GAAiBJ,kBAAjB;AACA,KAAKO,KAAL,GAAaF,cAAb","sourcesContent":["/*!\nCopyright (C) 2013 by WebReflection\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\nvar\n  // should be a not so common char\n  // possibly one JSON does not encode\n  // possibly one encodeURIComponent does not encode\n  // right now this char is '~' but this might change in the future\n  specialChar = '~',\n  safeSpecialChar = '\\\\x' + (\n    '0' + specialChar.charCodeAt(0).toString(16)\n  ).slice(-2),\n  escapedSafeSpecialChar = '\\\\' + safeSpecialChar,\n  specialCharRG = new RegExp(safeSpecialChar, 'g'),\n  safeSpecialCharRG = new RegExp(escapedSafeSpecialChar, 'g'),\n\n  safeStartWithSpecialCharRG = new RegExp('(?:^|([^\\\\\\\\]))' + escapedSafeSpecialChar),\n\n  indexOf = [].indexOf || function(v){\n    for(var i=this.length;i--&&this[i]!==v;);\n    return i;\n  },\n  $String = String  // there's no way to drop warnings in JSHint\n                    // about new String ... well, I need that here!\n                    // faked, and happy linter!\n;\n\nfunction generateReplacer(value, replacer, resolve) {\n  var\n    path = [],\n    all  = [value],\n    seen = [value],\n    mapp = [resolve ? specialChar : '[Circular]'],\n    last = value,\n    lvl  = 1,\n    i\n  ;\n  return function(key, value) {\n    // the replacer has rights to decide\n    // if a new object should be returned\n    // or if there's some key to drop\n    // let's call it here rather than \"too late\"\n    if (replacer) value = replacer.call(this, key, value);\n\n    // did you know ? Safari passes keys as integers for arrays\n    // which means if (key) when key === 0 won't pass the check\n    if (key !== '') {\n      if (last !== this) {\n        i = lvl - indexOf.call(all, this) - 1;\n        lvl -= i;\n        all.splice(lvl, all.length);\n        path.splice(lvl - 1, path.length);\n        last = this;\n      }\n      // console.log(lvl, key, path);\n      if (typeof value === 'object' && value) {\n    \t// if object isn't referring to parent object, add to the\n        // object path stack. Otherwise it is already there.\n        if (indexOf.call(all, value) < 0) {\n          all.push(last = value);\n        }\n        lvl = all.length;\n        i = indexOf.call(seen, value);\n        if (i < 0) {\n          i = seen.push(value) - 1;\n          if (resolve) {\n            // key cannot contain specialChar but could be not a string\n            path.push(('' + key).replace(specialCharRG, safeSpecialChar));\n            mapp[i] = specialChar + path.join(specialChar);\n          } else {\n            mapp[i] = mapp[0];\n          }\n        } else {\n          value = mapp[i];\n        }\n      } else {\n        if (typeof value === 'string' && resolve) {\n          // ensure no special char involved on deserialization\n          // in this case only first char is important\n          // no need to replace all value (better performance)\n          value = value .replace(safeSpecialChar, escapedSafeSpecialChar)\n                        .replace(specialChar, safeSpecialChar);\n        }\n      }\n    }\n    return value;\n  };\n}\n\nfunction retrieveFromPath(current, keys) {\n  for(var i = 0, length = keys.length; i < length; current = current[\n    // keys should be normalized back here\n    keys[i++].replace(safeSpecialCharRG, specialChar)\n  ]);\n  return current;\n}\n\nfunction generateReviver(reviver) {\n  return function(key, value) {\n    var isString = typeof value === 'string';\n    if (isString && value.charAt(0) === specialChar) {\n      return new $String(value.slice(1));\n    }\n    if (key === '') value = regenerate(value, value, {});\n    // again, only one needed, do not use the RegExp for this replacement\n    // only keys need the RegExp\n    if (isString) value = value .replace(safeStartWithSpecialCharRG, '$1' + specialChar)\n                                .replace(escapedSafeSpecialChar, safeSpecialChar);\n    return reviver ? reviver.call(this, key, value) : value;\n  };\n}\n\nfunction regenerateArray(root, current, retrieve) {\n  for (var i = 0, length = current.length; i < length; i++) {\n    current[i] = regenerate(root, current[i], retrieve);\n  }\n  return current;\n}\n\nfunction regenerateObject(root, current, retrieve) {\n  for (var key in current) {\n    if (current.hasOwnProperty(key)) {\n      current[key] = regenerate(root, current[key], retrieve);\n    }\n  }\n  return current;\n}\n\nfunction regenerate(root, current, retrieve) {\n  return current instanceof Array ?\n    // fast Array reconstruction\n    regenerateArray(root, current, retrieve) :\n    (\n      current instanceof $String ?\n        (\n          // root is an empty string\n          current.length ?\n            (\n              retrieve.hasOwnProperty(current) ?\n                retrieve[current] :\n                retrieve[current] = retrieveFromPath(\n                  root, current.split(specialChar)\n                )\n            ) :\n            root\n        ) :\n        (\n          current instanceof Object ?\n            // dedicated Object parser\n            regenerateObject(root, current, retrieve) :\n            // value as it is\n            current\n        )\n    )\n  ;\n}\n\nfunction stringifyRecursion(value, replacer, space, doNotResolve) {\n  return JSON.stringify(value, generateReplacer(value, replacer, !doNotResolve), space);\n}\n\nfunction parseRecursion(text, reviver) {\n  return JSON.parse(text, generateReviver(reviver));\n}\nthis.stringify = stringifyRecursion;\nthis.parse = parseRecursion;"]},"metadata":{},"sourceType":"script"}