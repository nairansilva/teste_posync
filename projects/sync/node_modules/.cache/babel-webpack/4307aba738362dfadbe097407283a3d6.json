{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { IonicNativePlugin, cordova, checkAvailability, cordovaPropertyGet, cordovaPropertySet } from '@ionic-native/core';\nimport { Observable, merge } from 'rxjs';\nimport { mapTo } from 'rxjs/operators';\nimport * as ɵngcc0 from '@angular/core';\nexport var Connection;\n\n(function (Connection) {\n  Connection[\"UNKNOWN\"] = \"unknown\";\n  Connection[\"ETHERNET\"] = \"ethernet\";\n  Connection[\"WIFI\"] = \"wifi\";\n  Connection[\"CELL_2G\"] = \"2g\";\n  Connection[\"CELL_3G\"] = \"3g\";\n  Connection[\"CELL_4G\"] = \"4g\";\n  Connection[\"CELL\"] = \"cellular\";\n  Connection[\"NONE\"] = \"none\";\n})(Connection || (Connection = {}));\n\nvar Network =\n/** @class */\nfunction (_super) {\n  __extends(Network, _super);\n\n  function Network() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * Constants for possible connection types\n     */\n\n\n    _this.Connection = {\n      UNKNOWN: 'unknown',\n      ETHERNET: 'ethernet',\n      WIFI: 'wifi',\n      CELL_2G: '2g',\n      CELL_3G: '3g',\n      CELL_4G: '4g',\n      CELL: 'cellular',\n      NONE: 'none'\n    };\n    return _this;\n  }\n\n  Network.prototype.onChange = function () {\n    var _this = this;\n\n    return function () {\n      if (checkAvailability(_this) === true) {\n        return merge(_this.onConnect().pipe(mapTo('connected')), _this.onDisconnect().pipe(mapTo('disconnected')));\n      }\n    }();\n  };\n\n  Network.prototype.onDisconnect = function () {\n    return cordova(this, \"onDisconnect\", {\n      \"eventObservable\": true,\n      \"event\": \"offline\",\n      \"element\": \"document\"\n    }, arguments);\n  };\n\n  Network.prototype.onConnect = function () {\n    return cordova(this, \"onConnect\", {\n      \"eventObservable\": true,\n      \"event\": \"online\",\n      \"element\": \"document\"\n    }, arguments);\n  };\n\n  Object.defineProperty(Network.prototype, \"type\", {\n    get: function get() {\n      return cordovaPropertyGet(this, \"type\");\n    },\n    set: function set(value) {\n      cordovaPropertySet(this, \"type\", value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Network.prototype, \"downlinkMax\", {\n    get: function get() {\n      return cordovaPropertyGet(this, \"downlinkMax\");\n    },\n    set: function set(value) {\n      cordovaPropertySet(this, \"downlinkMax\", value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Network.pluginName = \"Network\";\n  Network.plugin = \"cordova-plugin-network-information\";\n  Network.pluginRef = \"navigator.connection\";\n  Network.repo = \"https://github.com/apache/cordova-plugin-network-information\";\n  Network.platforms = [\"Amazon Fire OS\", \"Android\", \"Browser\", \"iOS\", \"Windows\"];\n\n  Network.ɵfac = /*@__PURE__*/function () {\n    var ɵNetwork_BaseFactory;\n    return function Network_Factory(t) {\n      return (ɵNetwork_BaseFactory || (ɵNetwork_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(Network)))(t || Network);\n    };\n  }();\n\n  Network.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: Network,\n    factory: function factory(t) {\n      return Network.ɵfac(t);\n    }\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Network, [{\n      type: Injectable\n    }], null, null);\n  })();\n\n  return Network;\n}(IonicNativePlugin);\n\nexport { Network }; //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AaW9uaWMtbmF0aXZlL3BsdWdpbnMvbmV0d29yay9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyx5RkFBcUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN2RyxPQUFPLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN6QyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBSXZDLE1BQU0sQ0FBTixJQUFZLFVBU1g7QUFURCxXQUFZLFVBQVU7QUFDckIsSUFBQyxpQ0FBbUIsQ0FBQTtBQUFDLElBQ3BCLG1DQUFxQixDQUFBO0FBQUMsSUFDdEIsMkJBQWEsQ0FBQTtBQUFDLElBQ2QsNEJBQWMsQ0FBQTtBQUFDLElBQ2YsNEJBQWMsQ0FBQTtBQUFDLElBQ2YsNEJBQWMsQ0FBQTtBQUFDLElBQ2YsK0JBQWlCLENBQUE7QUFBQyxJQUNsQiwyQkFBYSxDQUFBO0FBQ2YsQ0FBQyxFQVRXLFVBQVUsS0FBVixVQUFVLFFBU3JCO0FBQ0Q7QUFHMkIsSUFpREUsMkJBQWlCO0FBQUM7QUFFOUI7QUFJZCxRQUxEO0FBQ0Y7QUFFQSxXQURLO0FBQ0wsUUFBRSxnQkFBVSxHQUFHO0FBQ2YsWUFBSSxPQUFPLEVBQUUsU0FBUztBQUN0QixZQUFJLFFBQVEsRUFBRSxVQUFVO0FBQ3hCLFlBQUksSUFBSSxFQUFFLE1BQU07QUFDaEIsWUFBSSxPQUFPLEVBQUUsSUFBSTtBQUNqQixZQUFJLE9BQU8sRUFBRSxJQUFJO0FBQ2pCLFlBQUksT0FBTyxFQUFFLElBQUk7QUFDakIsWUFBSSxJQUFJLEVBQUUsVUFBVTtBQUNwQixZQUFJLElBQUksRUFBRSxNQUFNO0FBQ2hCLFNBQUcsQ0FBQztBQUNKO0FBRWU7QUFDZixJQWVFLDBCQUFRO0FBQWlCO0FBQTBCO0FBRTdDLG1EQUYrQztBQUN2RCxnQkFBSSxPQUFPLEtBQUssQ0FDVixLQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUN6QyxLQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBK0IsQ0FDOUUsQ0FBQztBQUNOLGFBQUc7QUFDSDtBQUVPO0FBQU8sSUFRWiw4QkFBWTtBQU1vQyxJQU9oRCwyQkFBUztBQUlzRiwwQkE5QzVFLHlCQUFJO0FBQUk7QUFNdkI7QUFHMkI7QUFDNUI7QUFBMkI7QUFBUSwwQkFKbkIsZ0NBQVc7QUFBSTtBQUkxQjtBQUdHO0FBQTJCO0FBQzlCO0FBQ1Y7QUFBb0M7QUFDVTtBQUUzQztBQUl5QjsyQ0ExQzNCLFVBQVU7Ozs7MEJBQ0w7QUFBQyxrQkFyRVA7QUFBRSxFQXFFMkIsaUJBQWlCO0FBQzdDLFNBRFksT0FBTztBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgQ29yZG92YUNoZWNrLCBDb3Jkb3ZhUHJvcGVydHksIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgbWVyZ2UgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcFRvIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5kZWNsYXJlIGNvbnN0IG5hdmlnYXRvcjogYW55O1xuXG5leHBvcnQgZW51bSBDb25uZWN0aW9uIHtcbiAgVU5LTk9XTiA9ICd1bmtub3duJyxcbiAgRVRIRVJORVQgPSAnZXRoZXJuZXQnLFxuICBXSUZJID0gJ3dpZmknLFxuICBDRUxMXzJHID0gJzJnJyxcbiAgQ0VMTF8zRyA9ICczZycsXG4gIENFTExfNEcgPSAnNGcnLFxuICBDRUxMID0gJ2NlbGx1bGFyJyxcbiAgTk9ORSA9ICdub25lJyxcbn1cblxuLyoqXG4gKiBAbmFtZSBOZXR3b3JrXG4gKiBAcHJlbWllciBuZXR3b3JrLWluZm9ybWF0aW9uXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJlcXVpcmVzIENvcmRvdmEgcGx1Z2luOiBjb3Jkb3ZhLXBsdWdpbi1uZXR3b3JrLWluZm9ybWF0aW9uLiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBbTmV0d29yayBwbHVnaW4gZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9jb3Jkb3ZhLXBsdWdpbi1uZXR3b3JrLWluZm9ybWF0aW9uKS5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IE5ldHdvcmsgfSBmcm9tICdAaW9uaWMtbmF0aXZlL25ldHdvcmsvbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIG5ldHdvcms6IE5ldHdvcmspIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIC8vIHdhdGNoIG5ldHdvcmsgZm9yIGEgZGlzY29ubmVjdGlvblxuICogbGV0IGRpc2Nvbm5lY3RTdWJzY3JpcHRpb24gPSB0aGlzLm5ldHdvcmsub25EaXNjb25uZWN0KCkuc3Vic2NyaWJlKCgpID0+IHtcbiAqICAgY29uc29sZS5sb2coJ25ldHdvcmsgd2FzIGRpc2Nvbm5lY3RlZCA6LSgnKTtcbiAqIH0pO1xuICpcbiAqIC8vIHN0b3AgZGlzY29ubmVjdCB3YXRjaFxuICogZGlzY29ubmVjdFN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICpcbiAqXG4gKiAvLyB3YXRjaCBuZXR3b3JrIGZvciBhIGNvbm5lY3Rpb25cbiAqIGxldCBjb25uZWN0U3Vic2NyaXB0aW9uID0gdGhpcy5uZXR3b3JrLm9uQ29ubmVjdCgpLnN1YnNjcmliZSgoKSA9PiB7XG4gKiAgIGNvbnNvbGUubG9nKCduZXR3b3JrIGNvbm5lY3RlZCEnKTtcbiAqICAgLy8gV2UganVzdCBnb3QgYSBjb25uZWN0aW9uIGJ1dCB3ZSBuZWVkIHRvIHdhaXQgYnJpZWZseVxuICogICAgLy8gYmVmb3JlIHdlIGRldGVybWluZSB0aGUgY29ubmVjdGlvbiB0eXBlLiBNaWdodCBuZWVkIHRvIHdhaXQuXG4gKiAgIC8vIHByaW9yIHRvIGRvaW5nIGFueSBhcGkgcmVxdWVzdHMgYXMgd2VsbC5cbiAqICAgc2V0VGltZW91dCgoKSA9PiB7XG4gKiAgICAgaWYgKHRoaXMubmV0d29yay50eXBlID09PSAnd2lmaScpIHtcbiAqICAgICAgIGNvbnNvbGUubG9nKCd3ZSBnb3QgYSB3aWZpIGNvbm5lY3Rpb24sIHdvb2hvbyEnKTtcbiAqICAgICB9XG4gKiAgIH0sIDMwMDApO1xuICogfSk7XG4gKlxuICogLy8gc3RvcCBjb25uZWN0IHdhdGNoXG4gKiBjb25uZWN0U3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gKlxuICogYGBgXG4gKiBAYWR2YW5jZWRcbiAqIFRoZSBgdHlwZWAgcHJvcGVydHkgd2lsbCByZXR1cm4gb25lIG9mIHRoZSBmb2xsb3dpbmcgY29ubmVjdGlvbiB0eXBlczogYHVua25vd25gLCBgZXRoZXJuZXRgLCBgd2lmaWAsIGAyZ2AsIGAzZ2AsIGA0Z2AsIGBjZWxsdWxhcmAsIGBub25lYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ05ldHdvcmsnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1uZXR3b3JrLWluZm9ybWF0aW9uJyxcbiAgcGx1Z2luUmVmOiAnbmF2aWdhdG9yLmNvbm5lY3Rpb24nLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9jb3Jkb3ZhLXBsdWdpbi1uZXR3b3JrLWluZm9ybWF0aW9uJyxcbiAgcGxhdGZvcm1zOiBbJ0FtYXpvbiBGaXJlIE9TJywgJ0FuZHJvaWQnLCAnQnJvd3NlcicsICdpT1MnLCAnV2luZG93cyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOZXR3b3JrIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogQ29uc3RhbnRzIGZvciBwb3NzaWJsZSBjb25uZWN0aW9uIHR5cGVzXG4gICAqL1xuICBDb25uZWN0aW9uID0ge1xuICAgIFVOS05PV046ICd1bmtub3duJyxcbiAgICBFVEhFUk5FVDogJ2V0aGVybmV0JyxcbiAgICBXSUZJOiAnd2lmaScsXG4gICAgQ0VMTF8yRzogJzJnJyxcbiAgICBDRUxMXzNHOiAnM2cnLFxuICAgIENFTExfNEc6ICc0ZycsXG4gICAgQ0VMTDogJ2NlbGx1bGFyJyxcbiAgICBOT05FOiAnbm9uZScsXG4gIH07XG5cbiAgLyoqXG4gICAqIENvbm5lY3Rpb24gdHlwZVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBAQ29yZG92YVByb3BlcnR5KCkgdHlwZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBEb3dubGluayBNYXggU3BlZWRcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgQENvcmRvdmFQcm9wZXJ0eSgpIGRvd25saW5rTWF4OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gb2JzZXJ2YWJsZSB0byB3YXRjaCBjb25uZWN0aW9uIGNoYW5nZXNcbiAgICogQHJldHVybiB7T2JzZXJ2YWJsZTwnY29ubmVjdGVkJyB8ICdkaXNjb25uZWN0ZWQnPn1cbiAgICovXG4gIEBDb3Jkb3ZhQ2hlY2soKVxuICBvbkNoYW5nZSgpOiBPYnNlcnZhYmxlPCdjb25uZWN0ZWQnIHwgJ2Rpc2Nvbm5lY3RlZCc+IHtcbiAgICByZXR1cm4gbWVyZ2UoXG4gICAgICB0aGlzLm9uQ29ubmVjdCgpLnBpcGUobWFwVG8oJ2Nvbm5lY3RlZCcpKSxcbiAgICAgIHRoaXMub25EaXNjb25uZWN0KCkucGlwZShtYXBUbygnZGlzY29ubmVjdGVkJykpIGFzIE9ic2VydmFibGU8J2Rpc2Nvbm5lY3RlZCc+XG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgbm90aWZpZWQgd2hlbiB0aGUgZGV2aWNlIGdvZXMgb2ZmbGluZVxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxhbnk+fSBSZXR1cm5zIGFuIG9ic2VydmFibGUuXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgZXZlbnRPYnNlcnZhYmxlOiB0cnVlLFxuICAgIGV2ZW50OiAnb2ZmbGluZScsXG4gICAgZWxlbWVudDogZG9jdW1lbnQsXG4gIH0pXG4gIG9uRGlzY29ubmVjdCgpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgbm90aWZpZWQgd2hlbiB0aGUgZGV2aWNlIGdvZXMgb25saW5lXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPGFueT59IFJldHVybnMgYW4gb2JzZXJ2YWJsZS5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBldmVudE9ic2VydmFibGU6IHRydWUsXG4gICAgZXZlbnQ6ICdvbmxpbmUnLFxuICAgIGVsZW1lbnQ6IGRvY3VtZW50LFxuICB9KVxuICBvbkNvbm5lY3QoKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==","map":{"version":3,"sources":["C:/Totvs/po-angular/node_modules/@ionic-native/network/__ivy_ngcc__/ngx/index.js"],"names":["__extends","Injectable","IonicNativePlugin","cordova","checkAvailability","cordovaPropertyGet","cordovaPropertySet","Observable","merge","mapTo","ɵngcc0","Connection","Network","_super","_this","apply","arguments","UNKNOWN","ETHERNET","WIFI","CELL_2G","CELL_3G","CELL_4G","CELL","NONE","prototype","onChange","onConnect","pipe","onDisconnect","Object","defineProperty","get","set","value","enumerable","configurable","pluginName","plugin","pluginRef","repo","platforms","ɵfac","ɵNetwork_BaseFactory","Network_Factory","t","ɵɵgetInheritedFactory","ɵprov","ɵɵdefineInjectable","token","factory","ngDevMode","ɵsetClassMetadata","type"],"mappings":"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","sourcesContent":["import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { IonicNativePlugin, cordova, checkAvailability, cordovaPropertyGet, cordovaPropertySet } from '@ionic-native/core';\nimport { Observable, merge } from 'rxjs';\nimport { mapTo } from 'rxjs/operators';\nimport * as ɵngcc0 from '@angular/core';\nexport var Connection;\n(function (Connection) {\n    Connection[\"UNKNOWN\"] = \"unknown\";\n    Connection[\"ETHERNET\"] = \"ethernet\";\n    Connection[\"WIFI\"] = \"wifi\";\n    Connection[\"CELL_2G\"] = \"2g\";\n    Connection[\"CELL_3G\"] = \"3g\";\n    Connection[\"CELL_4G\"] = \"4g\";\n    Connection[\"CELL\"] = \"cellular\";\n    Connection[\"NONE\"] = \"none\";\n})(Connection || (Connection = {}));\nvar Network = /** @class */ (function (_super) {\n    __extends(Network, _super);\n    function Network() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * Constants for possible connection types\n         */\n        _this.Connection = {\n            UNKNOWN: 'unknown',\n            ETHERNET: 'ethernet',\n            WIFI: 'wifi',\n            CELL_2G: '2g',\n            CELL_3G: '3g',\n            CELL_4G: '4g',\n            CELL: 'cellular',\n            NONE: 'none',\n        };\n        return _this;\n    }\n    Network.prototype.onChange = function () {\n        var _this = this;\n        return (function () {\n            if (checkAvailability(_this) === true) {\n                return merge(_this.onConnect().pipe(mapTo('connected')), _this.onDisconnect().pipe(mapTo('disconnected')));\n            }\n        })();\n    };\n    Network.prototype.onDisconnect = function () { return cordova(this, \"onDisconnect\", { \"eventObservable\": true, \"event\": \"offline\", \"element\": \"document\" }, arguments); };\n    Network.prototype.onConnect = function () { return cordova(this, \"onConnect\", { \"eventObservable\": true, \"event\": \"online\", \"element\": \"document\" }, arguments); };\n    Object.defineProperty(Network.prototype, \"type\", {\n        get: function () { return cordovaPropertyGet(this, \"type\"); },\n        set: function (value) { cordovaPropertySet(this, \"type\", value); },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Network.prototype, \"downlinkMax\", {\n        get: function () { return cordovaPropertyGet(this, \"downlinkMax\"); },\n        set: function (value) { cordovaPropertySet(this, \"downlinkMax\", value); },\n        enumerable: false,\n        configurable: true\n    });\n    Network.pluginName = \"Network\";\n    Network.plugin = \"cordova-plugin-network-information\";\n    Network.pluginRef = \"navigator.connection\";\n    Network.repo = \"https://github.com/apache/cordova-plugin-network-information\";\n    Network.platforms = [\"Amazon Fire OS\", \"Android\", \"Browser\", \"iOS\", \"Windows\"];\nNetwork.ɵfac = /*@__PURE__*/ function () { var ɵNetwork_BaseFactory; return function Network_Factory(t) { return (ɵNetwork_BaseFactory || (ɵNetwork_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(Network)))(t || Network); }; }();\nNetwork.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Network, factory: function (t) { return Network.ɵfac(t); } });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Network, [{\n        type: Injectable\n    }], null, null); })();\n    return Network;\n}(IonicNativePlugin));\nexport { Network };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AaW9uaWMtbmF0aXZlL3BsdWdpbnMvbmV0d29yay9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyx5RkFBcUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN2RyxPQUFPLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN6QyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBSXZDLE1BQU0sQ0FBTixJQUFZLFVBU1g7QUFURCxXQUFZLFVBQVU7QUFDckIsSUFBQyxpQ0FBbUIsQ0FBQTtBQUFDLElBQ3BCLG1DQUFxQixDQUFBO0FBQUMsSUFDdEIsMkJBQWEsQ0FBQTtBQUFDLElBQ2QsNEJBQWMsQ0FBQTtBQUFDLElBQ2YsNEJBQWMsQ0FBQTtBQUFDLElBQ2YsNEJBQWMsQ0FBQTtBQUFDLElBQ2YsK0JBQWlCLENBQUE7QUFBQyxJQUNsQiwyQkFBYSxDQUFBO0FBQ2YsQ0FBQyxFQVRXLFVBQVUsS0FBVixVQUFVLFFBU3JCO0FBQ0Q7QUFHMkIsSUFpREUsMkJBQWlCO0FBQUM7QUFFOUI7QUFJZCxRQUxEO0FBQ0Y7QUFFQSxXQURLO0FBQ0wsUUFBRSxnQkFBVSxHQUFHO0FBQ2YsWUFBSSxPQUFPLEVBQUUsU0FBUztBQUN0QixZQUFJLFFBQVEsRUFBRSxVQUFVO0FBQ3hCLFlBQUksSUFBSSxFQUFFLE1BQU07QUFDaEIsWUFBSSxPQUFPLEVBQUUsSUFBSTtBQUNqQixZQUFJLE9BQU8sRUFBRSxJQUFJO0FBQ2pCLFlBQUksT0FBTyxFQUFFLElBQUk7QUFDakIsWUFBSSxJQUFJLEVBQUUsVUFBVTtBQUNwQixZQUFJLElBQUksRUFBRSxNQUFNO0FBQ2hCLFNBQUcsQ0FBQztBQUNKO0FBRWU7QUFDZixJQWVFLDBCQUFRO0FBQWlCO0FBQTBCO0FBRTdDLG1EQUYrQztBQUN2RCxnQkFBSSxPQUFPLEtBQUssQ0FDVixLQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUN6QyxLQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBK0IsQ0FDOUUsQ0FBQztBQUNOLGFBQUc7QUFDSDtBQUVPO0FBQU8sSUFRWiw4QkFBWTtBQU1vQyxJQU9oRCwyQkFBUztBQUlzRiwwQkE5QzVFLHlCQUFJO0FBQUk7QUFNdkI7QUFHMkI7QUFDNUI7QUFBMkI7QUFBUSwwQkFKbkIsZ0NBQVc7QUFBSTtBQUkxQjtBQUdHO0FBQTJCO0FBQzlCO0FBQ1Y7QUFBb0M7QUFDVTtBQUUzQztBQUl5QjsyQ0ExQzNCLFVBQVU7Ozs7MEJBQ0w7QUFBQyxrQkFyRVA7QUFBRSxFQXFFMkIsaUJBQWlCO0FBQzdDLFNBRFksT0FBTztBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgQ29yZG92YUNoZWNrLCBDb3Jkb3ZhUHJvcGVydHksIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgbWVyZ2UgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcFRvIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5kZWNsYXJlIGNvbnN0IG5hdmlnYXRvcjogYW55O1xuXG5leHBvcnQgZW51bSBDb25uZWN0aW9uIHtcbiAgVU5LTk9XTiA9ICd1bmtub3duJyxcbiAgRVRIRVJORVQgPSAnZXRoZXJuZXQnLFxuICBXSUZJID0gJ3dpZmknLFxuICBDRUxMXzJHID0gJzJnJyxcbiAgQ0VMTF8zRyA9ICczZycsXG4gIENFTExfNEcgPSAnNGcnLFxuICBDRUxMID0gJ2NlbGx1bGFyJyxcbiAgTk9ORSA9ICdub25lJyxcbn1cblxuLyoqXG4gKiBAbmFtZSBOZXR3b3JrXG4gKiBAcHJlbWllciBuZXR3b3JrLWluZm9ybWF0aW9uXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJlcXVpcmVzIENvcmRvdmEgcGx1Z2luOiBjb3Jkb3ZhLXBsdWdpbi1uZXR3b3JrLWluZm9ybWF0aW9uLiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBbTmV0d29yayBwbHVnaW4gZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9jb3Jkb3ZhLXBsdWdpbi1uZXR3b3JrLWluZm9ybWF0aW9uKS5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IE5ldHdvcmsgfSBmcm9tICdAaW9uaWMtbmF0aXZlL25ldHdvcmsvbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIG5ldHdvcms6IE5ldHdvcmspIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIC8vIHdhdGNoIG5ldHdvcmsgZm9yIGEgZGlzY29ubmVjdGlvblxuICogbGV0IGRpc2Nvbm5lY3RTdWJzY3JpcHRpb24gPSB0aGlzLm5ldHdvcmsub25EaXNjb25uZWN0KCkuc3Vic2NyaWJlKCgpID0+IHtcbiAqICAgY29uc29sZS5sb2coJ25ldHdvcmsgd2FzIGRpc2Nvbm5lY3RlZCA6LSgnKTtcbiAqIH0pO1xuICpcbiAqIC8vIHN0b3AgZGlzY29ubmVjdCB3YXRjaFxuICogZGlzY29ubmVjdFN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICpcbiAqXG4gKiAvLyB3YXRjaCBuZXR3b3JrIGZvciBhIGNvbm5lY3Rpb25cbiAqIGxldCBjb25uZWN0U3Vic2NyaXB0aW9uID0gdGhpcy5uZXR3b3JrLm9uQ29ubmVjdCgpLnN1YnNjcmliZSgoKSA9PiB7XG4gKiAgIGNvbnNvbGUubG9nKCduZXR3b3JrIGNvbm5lY3RlZCEnKTtcbiAqICAgLy8gV2UganVzdCBnb3QgYSBjb25uZWN0aW9uIGJ1dCB3ZSBuZWVkIHRvIHdhaXQgYnJpZWZseVxuICogICAgLy8gYmVmb3JlIHdlIGRldGVybWluZSB0aGUgY29ubmVjdGlvbiB0eXBlLiBNaWdodCBuZWVkIHRvIHdhaXQuXG4gKiAgIC8vIHByaW9yIHRvIGRvaW5nIGFueSBhcGkgcmVxdWVzdHMgYXMgd2VsbC5cbiAqICAgc2V0VGltZW91dCgoKSA9PiB7XG4gKiAgICAgaWYgKHRoaXMubmV0d29yay50eXBlID09PSAnd2lmaScpIHtcbiAqICAgICAgIGNvbnNvbGUubG9nKCd3ZSBnb3QgYSB3aWZpIGNvbm5lY3Rpb24sIHdvb2hvbyEnKTtcbiAqICAgICB9XG4gKiAgIH0sIDMwMDApO1xuICogfSk7XG4gKlxuICogLy8gc3RvcCBjb25uZWN0IHdhdGNoXG4gKiBjb25uZWN0U3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gKlxuICogYGBgXG4gKiBAYWR2YW5jZWRcbiAqIFRoZSBgdHlwZWAgcHJvcGVydHkgd2lsbCByZXR1cm4gb25lIG9mIHRoZSBmb2xsb3dpbmcgY29ubmVjdGlvbiB0eXBlczogYHVua25vd25gLCBgZXRoZXJuZXRgLCBgd2lmaWAsIGAyZ2AsIGAzZ2AsIGA0Z2AsIGBjZWxsdWxhcmAsIGBub25lYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ05ldHdvcmsnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1uZXR3b3JrLWluZm9ybWF0aW9uJyxcbiAgcGx1Z2luUmVmOiAnbmF2aWdhdG9yLmNvbm5lY3Rpb24nLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9jb3Jkb3ZhLXBsdWdpbi1uZXR3b3JrLWluZm9ybWF0aW9uJyxcbiAgcGxhdGZvcm1zOiBbJ0FtYXpvbiBGaXJlIE9TJywgJ0FuZHJvaWQnLCAnQnJvd3NlcicsICdpT1MnLCAnV2luZG93cyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOZXR3b3JrIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogQ29uc3RhbnRzIGZvciBwb3NzaWJsZSBjb25uZWN0aW9uIHR5cGVzXG4gICAqL1xuICBDb25uZWN0aW9uID0ge1xuICAgIFVOS05PV046ICd1bmtub3duJyxcbiAgICBFVEhFUk5FVDogJ2V0aGVybmV0JyxcbiAgICBXSUZJOiAnd2lmaScsXG4gICAgQ0VMTF8yRzogJzJnJyxcbiAgICBDRUxMXzNHOiAnM2cnLFxuICAgIENFTExfNEc6ICc0ZycsXG4gICAgQ0VMTDogJ2NlbGx1bGFyJyxcbiAgICBOT05FOiAnbm9uZScsXG4gIH07XG5cbiAgLyoqXG4gICAqIENvbm5lY3Rpb24gdHlwZVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBAQ29yZG92YVByb3BlcnR5KCkgdHlwZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBEb3dubGluayBNYXggU3BlZWRcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgQENvcmRvdmFQcm9wZXJ0eSgpIGRvd25saW5rTWF4OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gb2JzZXJ2YWJsZSB0byB3YXRjaCBjb25uZWN0aW9uIGNoYW5nZXNcbiAgICogQHJldHVybiB7T2JzZXJ2YWJsZTwnY29ubmVjdGVkJyB8ICdkaXNjb25uZWN0ZWQnPn1cbiAgICovXG4gIEBDb3Jkb3ZhQ2hlY2soKVxuICBvbkNoYW5nZSgpOiBPYnNlcnZhYmxlPCdjb25uZWN0ZWQnIHwgJ2Rpc2Nvbm5lY3RlZCc+IHtcbiAgICByZXR1cm4gbWVyZ2UoXG4gICAgICB0aGlzLm9uQ29ubmVjdCgpLnBpcGUobWFwVG8oJ2Nvbm5lY3RlZCcpKSxcbiAgICAgIHRoaXMub25EaXNjb25uZWN0KCkucGlwZShtYXBUbygnZGlzY29ubmVjdGVkJykpIGFzIE9ic2VydmFibGU8J2Rpc2Nvbm5lY3RlZCc+XG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgbm90aWZpZWQgd2hlbiB0aGUgZGV2aWNlIGdvZXMgb2ZmbGluZVxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxhbnk+fSBSZXR1cm5zIGFuIG9ic2VydmFibGUuXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgZXZlbnRPYnNlcnZhYmxlOiB0cnVlLFxuICAgIGV2ZW50OiAnb2ZmbGluZScsXG4gICAgZWxlbWVudDogZG9jdW1lbnQsXG4gIH0pXG4gIG9uRGlzY29ubmVjdCgpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgbm90aWZpZWQgd2hlbiB0aGUgZGV2aWNlIGdvZXMgb25saW5lXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPGFueT59IFJldHVybnMgYW4gb2JzZXJ2YWJsZS5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBldmVudE9ic2VydmFibGU6IHRydWUsXG4gICAgZXZlbnQ6ICdvbmxpbmUnLFxuICAgIGVsZW1lbnQ6IGRvY3VtZW50LFxuICB9KVxuICBvbkNvbm5lY3QoKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ=="]},"metadata":{},"sourceType":"module"}